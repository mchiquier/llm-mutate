iteration: 0 generation: def newfun(image): return image.score(['preserved or cured', 'paint or varnish', 'mountainous terrain', 'displaying a number', 'a type of molding used to make decorative trim', 'a structure made of Obsidian'])
iteration: 1 generation: def newfun(image): return image.score(['brightly colored coral', 'large, triangular dorsal fin', 'red color', 'spores on the surface of the body', 'red or orange', 'long, thin tongue'])
iteration: 2 generation: def newfun(image): return image.score(['red, yellow, or orange', 'vertical or horizontal grooves', 'scooped or shoveled shape', 'loose-fitting sleeves', 'handheld', 'lighter brown stripes on the back'])
iteration: 3 generation: def newfun(image): return image.score(['thunderstorm in the image', 'black fur', 'short, shaggy fur', 'sculpted from a single piece of marble', 'a structure for birds to nest in', 'solid ice'])
iteration: 4 generation: def newfun(image): return image.score(['preserved or cured', 'paint or varnish', 'molding used to make decorative trim', 'Obsidian', 'a type of tree', 'displaying a number'])
iteration: 5 generation: def newfun(image): return image.score(['lace fabric', 'a mechanized device', 'small, textured, and irregular piece', ' found in still or slow-moving bodies of water', ' защищать', 'a rectangular board'])
iteration: 6 generation: def newfun(image): return image.score(['a curved or rounded shape', 'soft, fuzzy, or woolly texture', 'a hole or indentation in the middle', 'shiny, metallic surface', 'found in water or near electricity', 'functions as a tool'])
iteration: 7 generation: def newfun(image): return image.score(['artefacts from an archaeological site', 'a planar surface', 'a pink furry character', 'a brittle, chaotic ice shell', 'a type of tree', 'hidden crevices or tunnels'])
iteration: 8 generation: def newfun(image): return image.score(['a type of maple tree', 'granny smith apple', 'grapes', 'worn, smooth, or polished', 'a body of still water', 'a raised platform or table'])
iteration: 9 generation: def newfun(image): return image.score(['pyroclastic flows', 'lime', 'a type of fossil fuel', 'made from cotton or wool', 'on mountains or gentle hillsides', 'from a tree'])
iteration: 10 generation: def newfun(image): return image.score(['landscape', 'sunset', 'a group of cactuses', 'red, orange, and yellow', 'thick, wrinkled skin', 'a hinge'])
iteration: 11 generation: def newfun(image): return image.score(['carved or molded from a single piece of material', 'interesting shapes and colors', 'shopping list', 'covered with a fabric material', 'two or more objects in the image', 'aluminum foil'])
iteration: 12 generation: def newfun(image): return image.score(['brightly colored coral', 'large, triangular dorsal fin', 'red color', 'spores on the surface of the body', 'red, orange or yellow', 'flares'])
iteration: 13 generation: def newfun(image): return image.score(['brightly colored coral', 'large, triangular dorsal fin', 'red color', 'spores on the surface of the body', 'red or orange', 'long, thin tongue'])
iteration: 14 generation: def newfun(image): return image.score(['a cedar tree', 'may resemble a small cave', 'oatmeal', 'a carrier protein', 'a type of candy', 'associated with eternal life'])
iteration: 15 generation: def newfun(image): return image.score(['a type of mushroom', 'worn on the head', 'may be used for formal events', 'often feature intricate designs or patterns', 'associated with cowboys or western culture'])
iteration: 16 generation: def newfun(image): return image.score(['Artefacts from an archaeological site', 'a planar surface', 'a pink furry character', 'a brittle, chaotic ice shell', 'a type of tree', 'hidden crevices or tunnels'])
iteration: 17 generation: def newfun(image): return image.score(['a brown or black base color', 'typically cylindrical in shape', 'supports recurring tasks', 'gold nuggets', 'a type of stitch', 'made from a mammal hair'])
iteration: 18 generation: def newfun(image): return image.score(['red, yellow, or orange', 'scooped or shoveled shape', 'handheld', 'loose-fitting sleeves', 'a small, yellow flower', 'has a mirrored surface'])
iteration: 19 generation: def newfun(image): return image.score(['yellow or green', 'neatly arranged', 'tree bark', 'acinar', 'венча', 'curved'])
iteration: 20 generation: def newfun(image): return image.score(['a toothbrush-like shape', 'comes in different flavors', 'hair growing on the chin or lower lip', 'precious stones', 'cracks and crevices', 'volcanic rock'])
iteration: 21 generation: def newfun(image): return image.score(['bright yellow', 'short', 'number of feathers', 'a grid pattern', 'might have a header or a footer', 'rocks at the base'])
iteration: 22 generation: def newfun(image): return image.score(['floral print', 'typically found in the tropics', 'ramen noodle dishes', 'stitched or glued together', 'underwater grasslands', ' primary colors'])
iteration: 23 generation: def newfun(image): return image.score(['small underwater caves', 'an area of usually brightly colored, hydrothermally altered rock', 'stunted trees', 'soft religious music', 'smooth surfaces', 'water flowing from spinning turbines'])
iteration: 24 generation: def newfun(image): return image.score(['a freestanding sculpture', 'round', 'a series of small, limestone pillars', 'columns', 'several gables', 'rock archways'])
iteration: 25 generation: def newfun(image): return image.score(['woven', 'мен', 'cotton', 'wool', 'elbow-length sleeves', 'complex'])
iteration: 26 generation: def newfun(image): return image.score(['heavy mineral concentrations', 'extremely jagged peaks', 'highly oxidized', 'stratified', 'rapidly moving water', 'twisted'])
iteration: 27 generation: def newfun(image): return image.score(['small underwater caves', 'an area of usually brightly colored, hydrothermally altered rock', 'stunted trees', 'soft religious music', 'smooth surfaces', 'steep, rocky sides'])
iteration: 28 generation: def newfun(image): return image.score(['animal track', 'edible reproductive body of a mushroom', 'a central hub', 'occur naturally in the environment', 'three-pronged', 'crater'])
iteration: 29 generation: def newfun(image): return image.score(['occur naturally in various mineral deposits', 'a type of rock', 'may be used as an ornament', 'a state of being mathematically defined', 'a train station', 'fluorescent, glowing rocks'])
iteration: 30 generation: def newfun(image): return image.score(['shiny surface', 'hyphae (branches)', 'extremely small size', 'fine, soft hairs', 'cluster of puffballs'])
iteration: 31 generation: def newfun(image): return image.score(['hard outer shell', 'sweet or savory', 'usually found in caves', 'a type of fungus', 'fins on the back', 'a piece of fruit'])
iteration: 32 generation: def newfun(image): return image.score(['sandstone', 'conglomerate', 'shale', 'granite', 'limestone', 'found in veins'])
iteration: 33 generation: def newfun(image): return image.score(['often contains only one entrance and exit', 'formed from layers of rock and minerals', 'found at a considerable distance below the surface', 'a black or dark-colored diving board', 'a decorative plume on top', 'often contains valuable minerals'])
iteration: 34 generation: def newfun(image): return image.score(['glows in the dark', 'hard and crunchy', 'contains no calories', 'trees in a grove', 'stone structures', 'heavy forest cover'])
iteration: 35 generation: def newfun(image): return image.score(['forms when magma cools and solidifies', 'gritty texture', 'inarms', 'a fossilized plant or animal', 'a black substance', 'cavities with crystals'])
iteration: 36 generation: def newfun(image): return image.score(['sea', 'rocky cliff', 'near lava enters the ocean', 'aromatic spices', 'brightly colored wildflowers', 'results from the growth of coral polyps'])
iteration: 37 generation: def newfun(image): return image.score(['landscape', 'long exposure', 'ochre', 'plant material (e.g. leaves)', '/static//treesetic-non-animated.webplika', 'analogous'])
iteration: 38 generation: def newfun(image): return image.score(['yellow or green', 'neatly arranged', 'tree bark', 'aven', 'curved'])
iteration: 39 generation: def newfun(image): return image.score(['a rocky cliff', 'snow-capped mountain', 'calligraphy', 'thunder and lightning', 'a hard, carbonate shell', 'worn by bridesmaids'])
iteration: 40 generation: def newfun(image): return image.score(['brightly colored coral', 'large, triangular dorsal fin', 'red color', 'spores on the surface of the body', 'red, orange or yellow', 'flares'])
iteration: 41 generation: def newfun(image): return image.score(['moss or lichen growth', 's concave shape', 'curved or twisted shape', 'suggestive of a body part', 'gritty texture', 'once living thing'])
iteration: 42 generation: def newfun(image): return image.score(['feldspar', 'biotite', 'orthoclase', 'quartz', 'amphibole', 'parallel to its cleavage'])
iteration: 43 generation: def newfun(image): return image.score(['sand, gravel, rocks', 'sandstone', 'pyroclastic flows', 'upper tree bark', 'bright red juicy flesh', 'leathery texture'])
iteration: 44 generation: def newfun(image): return image.score(['precipitated calcium carbonate', 'snowy or icy peaks', 'grainy texture', 'insoluble in water', 'a typical holiday dessert', 'occur in sedimentary rocks'])
iteration: 45 generation: def newfun(image): return image.score(['typically symmetrical', 'commonly found in caves', 'usually formed from minerals such as gypsum, anhydrite, and halite', 'often in mineral deposits', 'calcite crystals', 'square or rectangular in cross-section'])
iteration: 46 generation: def newfun(image): return image.score(['orthoclase', 'quartz', 'plagioclase', 'amphibole', 'pyroxene', 'olivine'])
iteration: 47 generation: def newfun(image): return image.score(['limestone', 'sandstone', 'shale', 'granite', 'conglomerate', 'found in veins'])
iteration: 48 generation: def newfun(image): return image.score(['muscovite', 'sphalerite', 'pyrite', 'galena', 'chalcopyrite', 'bornite'])
iteration: 49 generation: def newfun(image): return image.score(['moss', 'lichen', 'a hard, dense shell', 'able to camouflage', 'orange or yellow', 'spiked shell'])
iteration: 50 generation: def newfun(image): return image.score(['wood or metal', 'a piece of pasta', 'a type of rock music', 'fabric with a floral pattern', 'spherical in shape', 'often used for manual jumping'])
iteration: 51 generation: def newfun(image): return image.score(['occur naturally in small crystals or clusters', 'formed from the evaporation of a mineral-rich solution', 'may be used as a semi-precious stone', 'a mineral in the amphibole group', 'a pyroxene mineral', 'olivine'])
iteration: 52 generation: def newfun(image): return image.score(['calcite', 'dolomite', 'gypsum', 'halite', 'sphalerite', 'pyroxene'])
iteration: 53 generation: def newfun(image): return image.score(['pyroxene', 'olivine', 'hornblende', 'biotite', 'foldiations or shear zones'])
iteration: 54 generation: def newfun(image): return image.score(['basalt', 'andesite', 'diorite', 'granite', 'pegmatite', 'may be found in intrusive formations'])
iteration: 55 generation: def newfun(image): return image.score(['iron oxide', 'magnetite', 'limonite', 'atacamite', 'malachite', 'a cupric sulfide mineral'])
iteration: 56 generation: def newfun(image): return image.score(['glauconite', 'chlorite', 'epIdote', 'calcite', 'dolomite', 'an amphibole mineral'])
iteration: 57 generation: def newfun(image): return image.score(['structures composed of many crystals', 'rough and irregular texture', 'fibrous, columnar, or granular', 'crystals often form in layers', 'found inside the Earth''s crust', 'processed into various forms for commercial use'])
iteration: 58 generation: def newfun(image): return image.score(['pieces are often polished', 'granular texture', 'contains needles of rutile', ' hexagonal vesicles', 'layers of mica', 'caused by different minerals'])
iteration: 59 generation: def newfun(image): return image.score(['fluorite', 'sphalerite', 'barite', 'pyrrhotite', 'chalcopyrite', 'bornite'])
iteration: 60 generation: def newfun(image): return image.score(['potassium feldspar', 'sodic amphibole', 'biotite', 'orthoamphibole'])
iteration: 61 generation: def newfun(image): return image.score(['structures composed of many crystals', 'rough and irregular texture', 'fibrous, columnar, or granular', 'crystals often form in layers', 'found inside the Earth''s crust', 'processed into various forms for commercial use', 'has secret compartments'])
iteration: 62 generation: def newfun(image): return image.score(['muscovite', 'sphalerite', 'pyrite', 'galena', 'chalcopyrite', 'bornite'])
iteration: 63 generation: def newfun(image): return image.score(['diorite', 'gabbro', 'basalt', 'peridotite', 'pyroxene', 'an orthmasic rock'])
iteration: 64 generation: def newfun(image): return image.score(['elongated mineral deposits', 'metallic minerals', 'dense mineral formation', 'igneous rock', 'some are semiprecious stones', '�occur in hydrothermal veins', 'often tapered or pointed'])
iteration: 65 generation: def newfun(image): return image.score(['potassium feldspar', 'sodic amphibole', 'biotite', 'orthoamphibole'])
iteration: 66 generation: def newfun(image): return image.score(['serpentinite', 'diorite', 'peridotite', 'gabbro', 'basalt', 'pegmatite'])
iteration: 67 generation: def newfun(image): return image.score(['relatively small geological features', 'a colorful, eye-catching rock', 'rivulets of water', 'spacecraft micro-meteors', 'containing a mineral', 'fine, hair-like structures'])
iteration: 68 generation: def newfun(image): return image.score(['schist', 'gneiss', 'migmatite'])
iteration: 69 generation: def newfun(image): return image.score(['serpentinite', 'blueschist', 'eclogite', 'amphibolite', 'greenschist', 'diagnostic of metamorphic process'])
iteration: 70 generation: def newfun(image): return image.score(['a dirty yellowish-brown color', 'one of several bands of sedimentary rock', 'quartz crystals', 'rock that is transitional between igneous and sedimentary', 'contains phenocrysts', 'water erosion'])
iteration: 71 generation: def newfun(image): return image.score(['Interlocking Calcite Crystals', 'Interlocking Dolomite Crystals', 'Geodes', 'Crystals of Aragonite', 'Oolitic Limonite', 'Patches or bands of Chert'])
iteration: 72 generation: def newfun(image): return image.score(['olivine', 'pyroxene', 'amphibole', 'biotite'])
iteration: 73 generation: def newfun(image): return image.score(['migmatite', 'gneiss', 'schist', 'amphibolite', 'diorite', 'granulite'])
iteration: 74 generation: def newfun(image): return image.score(['orthoclase', 'plagioclase', 'amphibole', 'biotite'])
iteration: 75 generation: def newfun(image): return image.score(['amphibole', 'biotite', 'chlorite', 'epidote', 'kyanite', 'staurolite'])
iteration: 76 generation: def newfun(image): return image.score(['feldspar', 'quartz', 'hornblende'])
iteration: 77 generation: def newfun(image): return image.score(['feldspar', 'biotite', 'amphibole', 'pyroxene', 'olivine', 'garnet'])
iteration: 78 generation: def newfun(image): return image.score(['diorite', 'gabbro', 'anorthosite', 'peridotite', 'pegmatite', 'serpentinite'])
iteration: 79 generation: def newfun(image): return image.score(['interlocking calcite crystals', 'interlocking dolomite crystals', 'crystals of aragonite', 'olinite', 'crinoid stems', 'patches or bands of chert'])
iteration: 80 generation: def newfun(image): return image.score(['hair blown back', 'ocean waves', 'buildings in the background', 'peeling paint', 'sand or dirt', 'models of mountains'])
iteration: 81 generation: def newfun(image): return image.score(['a natural and mineral pigment', 'a greenish-yellow mineral', 'the mineral gypsum', 'a garnet mineral', 'minerals such as halite and sylvite', 'calcite'])
iteration: 82 generation: def newfun(image): return image.score(['olivine', 'pyroxene', 'amphibole', 'biotite', 'plagioclase'])
iteration: 83 generation: def newfun(image): return image.score(['diorite', 'gabbro', 'anorthosite', 'peridotite', 'pegmatite', 'serpentinite'])
iteration: 84 generation: def newfun(image): return image.score(['blue-green leaves', 'forms large colonies', 'the outer coat of a mammal', 'granite countertops', 'worn by or associated with chefs', 'lampshade'])
iteration: 85 generation: def newfun(image): return image.score(['amphibole minerals', 'plagioclase', 'pyroxene minerals', 'olivine', 'a pyroxene'])
iteration: 86 generation: def newfun(image): return image.score(['basalt', 'diorite', 'peridotite', 'gabbro', 'anorthosite', 'a rock rich in olivine'])
iteration: 87 generation: def newfun(image): return image.score(['orthoclase', 'plagioclase', 'augite', 'biotite', 'hornblende', 'a dimorphic mineral'])
iteration: 88 generation: def newfun(image): return image.score(['chalcopyrite', 'pyrite', 'sphalerite', 'galena', 'bornite'])
iteration: 89 generation: def newfun(image): return image.score(['amphibole minerals', ' pyroxene minerals', 'plagioclase', 'olivine', 'ornate; covered with colorful designs'])
iteration: 90 generation: def newfun(image): return image.score(['serpentinite', 'blueschist', 'eclogite', 'amphibolite', 'greenschist', 'diagnostic of metamorphic process'])
iteration: 91 generation: def newfun(image): return image.score(['olivine', 'pyroxene', 'amphibole'])
iteration: 92 generation: def newfun(image): return image.score(['plagioclase', 'orthoclase', 'clinopyroxene', 'orthoamphibole', 'an alkali-rich rock'])
iteration: 93 generation: def newfun(image): return image.score(['igneous rock', 'erupted from a volcano', 'an extrusive igneous rock', 'complex molecular structures', 'shiny crystals', 'frequently found in caves'])
iteration: 94 generation: def newfun(image): return image.score(['pentagon-shaped minerals', 'rhombohedral crystals', 'calcite flowers', ' stalagmites', 'symmetrical honeycomb formations', 'a dark-colored mineral'])
iteration: 95 generation: def newfun(image): return image.score(['feldspar', 'amphibole', 'pyroxene', 'olivine', 'biotite', 'chromite'])
iteration: 96 generation: def newfun(image): return image.score(['metallic minerals', 'dendritic crystals', 'sphalerite crystals', 'anglesite crystals', ' barrel-shaped aggregates', 'pyrite cubes'])
iteration: 97 generation: def newfun(image): return image.score(['muscovite', 'biotite', 'a mica mineral', 'a type of pyroxene'])
iteration: 98 generation: def newfun(image): return image.score(['olivine', 'biotite', 'pyroxene', 'amphibole', 'garnet', 'feldspar'])
iteration: 99 generation: def newfun(image): return image.score(['feldspar', 'amphibole', 'pyroxene', 'olivine', 'biotite', ' spawn near hydrothermal vents'])
iteration: 100 generation: def newfun(image): return image.score(['glauconite', 'chlorite', 'epIdote', 'calcite', 'dolomite', 'an amphibole mineral'])
iteration: 101 generation: def newfun(image): return image.score(['muscovite', 'biotite', 'amphibole', 'pyroxene'])
iteration: 102 generation: def newfun(image): return image.score(['a pyroxene mineral', 'a type of amphibole mineral', 'a polymorph of quartz', 'a mineral composed of iron and magnesium oxides', 'a feldspar mineral'])
iteration: 103 generation: def newfun(image): return image.score(['amphibolite', 'eclogite'])
iteration: 104 generation: def newfun(image): return image.score(['olivine', 'biotite', 'pyroxene'])
iteration: 105 generation: def newfun(image): return image.score(['mushrooms', 'algae', 'lichens', 'bracket fungi', 'bryophytes', 'puffballs'])
iteration: 106 generation: def newfun(image): return image.score(['insect eggs', 'fungal growth', 'lichen', 'moss', 'lichens', 'common houseplant'])
iteration: 107 generation: def newfun(image): return image.score(['amphibole', 'orthoamphibole'])
iteration: 108 generation: def newfun(image): return image.score(['feldspar', 'pyroxene', 'amphibole'])
iteration: 109 generation: def newfun(image): return image.score(['orthoamphibole', 'pyroxene'])
iteration: 110 generation: def newfun(image): return image.score(['pyroxene', 'plagioclase'])
iteration: 111 generation: def newfun(image): return image.score(['pyroxene', 'amphibole', 'olivine'])
iteration: 112 generation: def newfun(image): return image.score(['chalcopyrite', 'pyrite', 'sphalerite', 'galena'])
iteration: 113 generation: def newfun(image): return image.score(['pyroxene minerals', 'amphibole minerals', 'opaque minerals', 'feldspar minerals', 'plagioclase'])
iteration: 114 generation: def newfun(image): return image.score([' orthoclase', 'plagioclase', 'anorthite', 'pyroxene', 'olivine', 'ilmenite'])
iteration: 115 generation: def newfun(image): return image.score(['plagioclase', 'pyroxene', 'olivine'])
iteration: 116 generation: def newfun(image): return image.score(['glauconite', 'chlorite', 'epIdote', 'calcite', 'dolomite', 'an amphibole mineral'])
iteration: 117 generation: def newfun(image): return image.score(['pyroxene', 'amphibole', 'biotite'])
iteration: 118 generation: def newfun(image): return image.score(['plagioclase', 'pyroxene'])
iteration: 119 generation: def newfun(image): return image.score(['troctolitic and plagioclase'])
iteration: 120 generation: def newfun(image): return image.score(['olivine', 'augite'])
iteration: 121 generation: def newfun(image): return image.score(['feldspar', 'biotite', 'amphibole', 'pyroxene', 'olivine', 'garnet'])
iteration: 122 generation: def newfun(image): return image.score(['several species of moss', 'lichen', 'lichens', 'green plant', 'moss', 'commonly grow together'])
iteration: 123 generation: def newfun(image): return image.score(['a mineral species that belongs to the quartz group'])
iteration: 124 generation: def newfun(image): return image.score(['pyroxene', 'amphibole', 'feldspar', 'quartz'])
iteration: 125 generation: def newfun(image): return image.score(['lichen', 'crustose lichens'])
iteration: 126 generation: def newfun(image): return image.score(['calcite crystals'])
iteration: 127 generation: def newfun(image): return image.score(['lichen', 'lichenized fungus', 'crustose lichen', 'foliose lichen', 'quantum computer programming'])
iteration: 128 generation: def newfun(image): return image.score(['a group of feldspar minerals'])
iteration: 129 generation: def newfun(image): return image.score(['a mineral species that belongs to the feldspar group'])
iteration: 130 generation: def newfun(image): return image.score(['vesicles in a volcanic rock', 'an evaporite deposit', 'sphalerite', 'gadolinite', 'apophyllite'])
iteration: 131 generation: def newfun(image): return image.score(['a type of feldspar mineral', 'a type of mica mineral', 'a type of amphibole mineral', ' a type of pyroxene mineral', 'a type of olivine mineral'])
iteration: 132 generation: def newfun(image): return image.score(['interlocking pyroxene crystals', 'skeletal calcite crystals'])
iteration: 133 generation: def newfun(image): return image.score(['feldspar minerals'])
iteration: 134 generation: def newfun(image): return image.score(['crustose lichen', 'foliose lichen'])
iteration: 135 generation: def newfun(image): return image.score(['Calcite', 'Dolomite', 'Pyrolusite', 'Aragonite', 'Limonite', 'Chert'])
iteration: 136 generation: def newfun(image): return image.score(['Interlocking Calcite Crystals', 'Interlocking Dolomite Crystals', 'Geodes', 'Crystals of Aragonite', 'Oolitic Limonite', 'Patches or bands of Chert'])
iteration: 137 generation: def newfun(image): return image.score(['silicate minerals', 'feldspar minerals', 'pyroxene minerals', 'amphibole minerals', 'mica minerals'])
iteration: 138 generation: def newfun(image): return image.score(['levanite crystals', 'pyromorphite crystals', 'globular aggregates', ' stalactitic formations'])
iteration: 139 generation: def newfun(image): return image.score(['amphibole minerals', 'pyroxene minerals'])
iteration: 140 generation: def newfun(image): return image.score(['pyroxene', 'augite'])
iteration: 141 generation: def newfun(image): return image.score(['foliose lichen', 'crustose lichen'])
iteration: 142 generation: def newfun(image): return image.score(['lichens', 'foliose lichens'])
iteration: 143 generation: def newfun(image): return image.score(['lichens'])
iteration: 144 generation: def newfun(image): return image.score(['pyroxene minerals', 'feldspar minerals', 'amphibole minerals', 'granite', 'diorite', 'pegmatite'])
iteration: 145 generation: def newfun(image): return image.score(['interlocking calcite crystals', 'calcite', 'dolomite', 'glauconite', 'chlorite'])
iteration: 146 generation: def newfun(image): return image.score(['feldspar minerals', 'pyroxene minerals'])
iteration: 147 generation: def newfun(image): return image.score(['foliose lichens'])
iteration: 148 generation: def newfun(image): return image.score(['a micaceous mineral including flakes of mica', 'a white or yellow mineral consisting of beryllium silicate', 'a yellowish mineral consisting of lead sulfide', 'calcite in pseudomorph to pyroxene'])
iteration: 149 generation: def newfun(image): return image.score(['rock lichens', 'candleflame-shaped lichens'])
iteration: 150 generation: def newfun(image): return image.score(['amphibole minerals'])
iteration: 151 generation: def newfun(image): return image.score(['amphibole', 'pyroxene'])
iteration: 152 generation: def newfun(image): return image.score(['crustose lichens', 'squamulose lichens'])
iteration: 153 generation: def newfun(image): return image.score(['plagioclase', 'pyroxene'])
iteration: 154 generation: def newfun(image): return image.score(['amphibole', 'plagioclase', 'pyroxene', 'olivine'])
iteration: 155 generation: def newfun(image):     return image.score(['crustose lichen', 'foliose lichen'])
iteration: 156 generation: def newfun(image): return image.score(['pyroxene', 'plagioclase', 'amphibole', 'olivine'])
iteration: 157 generation: def newfun(image): return image.score(['crustose lichens', 'crustose lichens (orange)'])
iteration: 158 generation: def newfun(image): return image.score(['amphibole minerals', 'pyroxene minerals', 'plagioclase', 'olivine', 'orthoclase'])
iteration: 159 generation: def newfun(image): return image.score(['feldspar minerals', 'biotite minerals', 'pyroxene minerals', 'amphibole minerals', 'semiprecious stones'])
iteration: 160 generation: def newfun(image): return image.score(['orthoclase minerals', 'amphibole', 'plagioclase mineral', 'pyroxene mineral', 'olivine mineral', 'ornate; lots of sharp, pointed peaks'])
iteration: 161 generation: def newfun(image): return image.score(['orange-colored lichens', 'olive-green lichens'])
iteration: 162 generation: def newfun(image): return image.score(['amphibole orthogonal to plagioclase'])
iteration: 163 generation: def newfun(image): return image.score(['lichen', 'lichenized fungus', 'crustose lichen', 'foliose lichen'])
iteration: 164 generation: def newfun(image): return image.score(['orange-colored lichens'])
iteration: 165 generation: def newfun(image): return image.score(['augite', 'orthpyroxene'])
iteration: 166 generation: def newfun(image): return image.score(['foliose lichen'])
iteration: 167 generation: def newfun(image): return image.score(['foliose lichens'])
iteration: 168 generation: def newfun(image): return image.score(['interlocking plagioclase crystals', 'interlocking pyroxene crystals'])
iteration: 169 generation: def newfun(image): return image.score(['amphibole minerals', 'pyroxene minerals', 'plagioclase', 'olivine'])
iteration: 170 generation: def newfun(image): return image.score(['feldspar minerals', 'pyroxene minerals', 'amphibole minerals', 'olivine minerals'])
iteration: 171 generation: def newfun(image): return image.score(['a mineral from the feldspar group'])
iteration: 172 generation: def newfun(image): return image.score(['lichen communities'])
iteration: 173 generation: def newfun(image): return image.score(['crustose lichens'])
iteration: 174 generation: def newfun(image): return image.score(['lichen growing on rocks'])
iteration: 175 generation: def newfun(image): return image.score(['lichens with fungous components'])
iteration: 176 generation: def newfun(image): return image.score(['an amphibole mineral', ' Olivine'])
iteration: 177 generation: def newfun(image): return image.score(['a crustose lichen with white or yellow apothecia'])
iteration: 178 generation: def newfun(image): return image.score(['lichen crust on rocks'])
iteration: 179 generation: def newfun(image): return image.score(['lichen on tree bark'])
iteration: 180 generation: def newfun(image): return image.score(['lichen crust on wood'])
iteration: 181 generation: def newfun(image): return image.score(['lichen growing on logs'])
iteration: 182 generation: def newfun(image): return image.score(['lichen crust on trees'])
iteration: 183 generation: def newfun(image): return image.score(['lichens on rocks'])
iteration: 184 generation: def newfun(image): return image.score(['lichens growing on rocks'])
iteration: 185 generation: def newfun(image): return image.score(['beige-colored lichens'])
iteration: 186 generation: def newfun(image): return image.score(['pyroxene', 'augite'])
iteration: 187 generation: def newfun(image): return image.score(['crustulose lichens'])
iteration: 188 generation: def newfun(image): return image.score(['foliose lichens'])
iteration: 189 generation: def newfun(image): return image.score(['pyroxene minerals'])
iteration: 190 generation: def newfun(image): return image.score(['lichen on tree bark'])
iteration: 191 generation: def newfun(image): return image.score(['corticolous lichens'])
iteration: 192 generation: def newfun(image): return image.score(['lichens on bark'])
iteration: 193 generation: def newfun(image): return image.score(['crustose lichens (yellow or orange)'])
iteration: 194 generation: def newfun(image): return image.score(['orthoamphibole embedded in plagioclase'])
iteration: 195 generation: def newfun(image): return image.score(['serpentinite', 'a metasomatized peridotite or dunite'])
iteration: 196 generation: def newfun(image): return image.score(['beige lichen growing on a tree trunk'])
iteration: 197 generation: def newfun(image): return image.score(['amphibole minerals', 'pyroxene minerals', 'plagioclase'])
iteration: 198 generation: def newfun(image): return image.score(['lichen on tree bark', 'lichen on tree bark (orange)'])
iteration: 199 generation: def newfun(image): return image.score(['corticolous lichens', 'foliose lichens'])
