iteration:  0 best program: def newfun(image): return image.score(['brightly colored coral', 'large, triangular dorsal fin', 'red color', 'spores on the surface of the body', 'red or orange', 'long, thin tongue'])  
iteration:  1 best program: def newfun(image): return image.score(['brightly colored coral', 'large, triangular dorsal fin', 'red color', 'spores on the surface of the body', 'red or orange', 'long, thin tongue'])  
iteration:  2 best program: def newfun(image): return image.score(['brightly colored coral', 'large, triangular dorsal fin', 'red color', 'spores on the surface of the body', 'red or orange', 'long, thin tongue'])  
iteration:  3 best program: def newfun(image): return image.score(['brightly colored coral', 'large, triangular dorsal fin', 'red color', 'spores on the surface of the body', 'red or orange', 'long, thin tongue'])  
iteration:  4 best program: def newfun(image): return image.score(['brightly colored coral', 'large, triangular dorsal fin', 'red color', 'spores on the surface of the body', 'red or orange', 'long, thin tongue'])  
iteration:  5 best program: def newfun(image): return image.score(['brightly colored coral', 'large, triangular dorsal fin', 'red color', 'spores on the surface of the body', 'red or orange', 'long, thin tongue'])  
iteration:  6 best program: def newfun(image): return image.score(['brightly colored coral', 'large, triangular dorsal fin', 'red color', 'spores on the surface of the body', 'red or orange', 'long, thin tongue'])  
iteration:  7 best program: def newfun(image): return image.score(['brightly colored coral', 'large, triangular dorsal fin', 'red color', 'spores on the surface of the body', 'red or orange', 'long, thin tongue'])  
iteration:  8 best program: def newfun(image): return image.score(['brightly colored coral', 'large, triangular dorsal fin', 'red color', 'spores on the surface of the body', 'red or orange', 'long, thin tongue'])  
iteration:  9 best program: def newfun(image): return image.score(['brightly colored coral', 'large, triangular dorsal fin', 'red color', 'spores on the surface of the body', 'red or orange', 'long, thin tongue'])  
iteration:  10 best program: def newfun(image): return image.score(['pyroclastic flows', 'lime', 'a type of fossil fuel', 'made from cotton or wool', 'on mountains or gentle hillsides', 'from a tree']) 
iteration:  11 best program: def newfun(image): return image.score(['pyroclastic flows', 'lime', 'a type of fossil fuel', 'made from cotton or wool', 'on mountains or gentle hillsides', 'from a tree']) 
iteration:  12 best program: def newfun(image): return image.score(['pyroclastic flows', 'lime', 'a type of fossil fuel', 'made from cotton or wool', 'on mountains or gentle hillsides', 'from a tree']) 
iteration:  13 best program: def newfun(image): return image.score(['brightly colored coral', 'large, triangular dorsal fin', 'red color', 'spores on the surface of the body', 'red, orange or yellow', 'flares']) 
iteration:  14 best program: def newfun(image): return image.score(['brightly colored coral', 'large, triangular dorsal fin', 'red color', 'spores on the surface of the body', 'red, orange or yellow', 'flares']) 
iteration:  15 best program: def newfun(image): return image.score(['brightly colored coral', 'large, triangular dorsal fin', 'red color', 'spores on the surface of the body', 'red, orange or yellow', 'flares']) 
iteration:  16 best program: def newfun(image): return image.score(['brightly colored coral', 'large, triangular dorsal fin', 'red color', 'spores on the surface of the body', 'red, orange or yellow', 'flares']) 
iteration:  17 best program: def newfun(image): return image.score(['brightly colored coral', 'large, triangular dorsal fin', 'red color', 'spores on the surface of the body', 'red, orange or yellow', 'flares']) 
iteration:  18 best program: def newfun(image): return image.score(['brightly colored coral', 'large, triangular dorsal fin', 'red color', 'spores on the surface of the body', 'red, orange or yellow', 'flares']) 
iteration:  19 best program: def newfun(image): return image.score(['brightly colored coral', 'large, triangular dorsal fin', 'red color', 'spores on the surface of the body', 'red, orange or yellow', 'flares']) 
iteration:  20 best program: def newfun(image): return image.score(['brightly colored coral', 'large, triangular dorsal fin', 'red color', 'spores on the surface of the body', 'red, orange or yellow', 'flares']) 
iteration:  21 best program: def newfun(image): return image.score(['brightly colored coral', 'large, triangular dorsal fin', 'red color', 'spores on the surface of the body', 'red, orange or yellow', 'flares']) 
iteration:  22 best program: def newfun(image): return image.score(['brightly colored coral', 'large, triangular dorsal fin', 'red color', 'spores on the surface of the body', 'red, orange or yellow', 'flares']) 
iteration:  23 best program: def newfun(image): return image.score(['brightly colored coral', 'large, triangular dorsal fin', 'red color', 'spores on the surface of the body', 'red, orange or yellow', 'flares']) 
iteration:  24 best program: def newfun(image): return image.score(['small underwater caves', 'an area of usually brightly colored, hydrothermally altered rock', 'stunted trees', 'soft religious music', 'smooth surfaces', 'water flowing from spinning turbines']) 
iteration:  25 best program: def newfun(image): return image.score(['a freestanding sculpture', 'round', 'a series of small, limestone pillars', 'columns', 'several gables', 'rock archways']) 
iteration:  26 best program: def newfun(image): return image.score(['a freestanding sculpture', 'round', 'a series of small, limestone pillars', 'columns', 'several gables', 'rock archways']) 
iteration:  27 best program: def newfun(image): return image.score(['a freestanding sculpture', 'round', 'a series of small, limestone pillars', 'columns', 'several gables', 'rock archways']) 
iteration:  28 best program: def newfun(image): return image.score(['small underwater caves', 'an area of usually brightly colored, hydrothermally altered rock', 'stunted trees', 'soft religious music', 'smooth surfaces', 'steep, rocky sides']) 
iteration:  29 best program: def newfun(image): return image.score(['small underwater caves', 'an area of usually brightly colored, hydrothermally altered rock', 'stunted trees', 'soft religious music', 'smooth surfaces', 'steep, rocky sides']) 
iteration:  30 best program: def newfun(image): return image.score(['small underwater caves', 'an area of usually brightly colored, hydrothermally altered rock', 'stunted trees', 'soft religious music', 'smooth surfaces', 'steep, rocky sides']) 
iteration:  31 best program: def newfun(image): return image.score(['small underwater caves', 'an area of usually brightly colored, hydrothermally altered rock', 'stunted trees', 'soft religious music', 'smooth surfaces', 'steep, rocky sides']) 
iteration:  32 best program: def newfun(image): return image.score(['small underwater caves', 'an area of usually brightly colored, hydrothermally altered rock', 'stunted trees', 'soft religious music', 'smooth surfaces', 'steep, rocky sides']) 
iteration:  33 best program: def newfun(image): return image.score(['sandstone', 'conglomerate', 'shale', 'granite', 'limestone', 'found in veins']) 
iteration:  34 best program: def newfun(image): return image.score(['sandstone', 'conglomerate', 'shale', 'granite', 'limestone', 'found in veins']) 
iteration:  35 best program: def newfun(image): return image.score(['sandstone', 'conglomerate', 'shale', 'granite', 'limestone', 'found in veins']) 
iteration:  36 best program: def newfun(image): return image.score(['sandstone', 'conglomerate', 'shale', 'granite', 'limestone', 'found in veins']) 
iteration:  37 best program: def newfun(image): return image.score(['sandstone', 'conglomerate', 'shale', 'granite', 'limestone', 'found in veins']) 
iteration:  38 best program: def newfun(image): return image.score(['sandstone', 'conglomerate', 'shale', 'granite', 'limestone', 'found in veins']) 
iteration:  39 best program: def newfun(image): return image.score(['sandstone', 'conglomerate', 'shale', 'granite', 'limestone', 'found in veins']) 
iteration:  40 best program: def newfun(image): return image.score(['sandstone', 'conglomerate', 'shale', 'granite', 'limestone', 'found in veins']) 
iteration:  41 best program: def newfun(image): return image.score(['sandstone', 'conglomerate', 'shale', 'granite', 'limestone', 'found in veins']) 
iteration:  42 best program: def newfun(image): return image.score(['sandstone', 'conglomerate', 'shale', 'granite', 'limestone', 'found in veins']) 
iteration:  43 best program: def newfun(image): return image.score(['feldspar', 'biotite', 'orthoclase', 'quartz', 'amphibole', 'parallel to its cleavage']) 
iteration:  44 best program: def newfun(image): return image.score(['feldspar', 'biotite', 'orthoclase', 'quartz', 'amphibole', 'parallel to its cleavage']) 
iteration:  45 best program: def newfun(image): return image.score(['feldspar', 'biotite', 'orthoclase', 'quartz', 'amphibole', 'parallel to its cleavage']) 
iteration:  46 best program: def newfun(image): return image.score(['feldspar', 'biotite', 'orthoclase', 'quartz', 'amphibole', 'parallel to its cleavage']) 
iteration:  47 best program: def newfun(image): return image.score(['orthoclase', 'quartz', 'plagioclase', 'amphibole', 'pyroxene', 'olivine']) 
iteration:  48 best program: def newfun(image): return image.score(['orthoclase', 'quartz', 'plagioclase', 'amphibole', 'pyroxene', 'olivine']) 
iteration:  49 best program: def newfun(image): return image.score(['muscovite', 'sphalerite', 'pyrite', 'galena', 'chalcopyrite', 'bornite']) 
iteration:  50 best program: def newfun(image): return image.score(['muscovite', 'sphalerite', 'pyrite', 'galena', 'chalcopyrite', 'bornite']) 
iteration:  51 best program: def newfun(image): return image.score(['muscovite', 'sphalerite', 'pyrite', 'galena', 'chalcopyrite', 'bornite']) 
iteration:  52 best program: def newfun(image): return image.score(['occur naturally in small crystals or clusters', 'formed from the evaporation of a mineral-rich solution', 'may be used as a semi-precious stone', 'a mineral in the amphibole group', 'a pyroxene mineral', 'olivine']) 
iteration:  53 best program: def newfun(image): return image.score(['occur naturally in small crystals or clusters', 'formed from the evaporation of a mineral-rich solution', 'may be used as a semi-precious stone', 'a mineral in the amphibole group', 'a pyroxene mineral', 'olivine']) 
iteration:  54 best program: def newfun(image): return image.score(['pyroxene', 'olivine', 'hornblende', 'biotite', 'foldiations or shear zones']) 
iteration:  55 best program: def newfun(image): return image.score(['pyroxene', 'olivine', 'hornblende', 'biotite', 'foldiations or shear zones']) 
iteration:  56 best program: def newfun(image): return image.score(['pyroxene', 'olivine', 'hornblende', 'biotite', 'foldiations or shear zones']) 
iteration:  57 best program: def newfun(image): return image.score(['glauconite', 'chlorite', 'epIdote', 'calcite', 'dolomite', 'an amphibole mineral']) 
iteration:  58 best program: def newfun(image): return image.score(['glauconite', 'chlorite', 'epIdote', 'calcite', 'dolomite', 'an amphibole mineral']) 
iteration:  59 best program: def newfun(image): return image.score(['glauconite', 'chlorite', 'epIdote', 'calcite', 'dolomite', 'an amphibole mineral']) 
iteration:  60 best program: def newfun(image): return image.score(['glauconite', 'chlorite', 'epIdote', 'calcite', 'dolomite', 'an amphibole mineral']) 
iteration:  61 best program: def newfun(image): return image.score(['glauconite', 'chlorite', 'epIdote', 'calcite', 'dolomite', 'an amphibole mineral']) 
iteration:  62 best program: def newfun(image): return image.score(['glauconite', 'chlorite', 'epIdote', 'calcite', 'dolomite', 'an amphibole mineral']) 
iteration:  63 best program: def newfun(image): return image.score(['glauconite', 'chlorite', 'epIdote', 'calcite', 'dolomite', 'an amphibole mineral']) 
iteration:  64 best program: def newfun(image): return image.score(['glauconite', 'chlorite', 'epIdote', 'calcite', 'dolomite', 'an amphibole mineral']) 
iteration:  65 best program: def newfun(image): return image.score(['glauconite', 'chlorite', 'epIdote', 'calcite', 'dolomite', 'an amphibole mineral']) 
iteration:  66 best program: def newfun(image): return image.score(['glauconite', 'chlorite', 'epIdote', 'calcite', 'dolomite', 'an amphibole mineral']) 
iteration:  67 best program: def newfun(image): return image.score(['glauconite', 'chlorite', 'epIdote', 'calcite', 'dolomite', 'an amphibole mineral']) 
iteration:  68 best program: def newfun(image): return image.score(['glauconite', 'chlorite', 'epIdote', 'calcite', 'dolomite', 'an amphibole mineral']) 
iteration:  69 best program: def newfun(image): return image.score(['glauconite', 'chlorite', 'epIdote', 'calcite', 'dolomite', 'an amphibole mineral']) 
iteration:  70 best program: def newfun(image): return image.score(['glauconite', 'chlorite', 'epIdote', 'calcite', 'dolomite', 'an amphibole mineral']) 
iteration:  71 best program: def newfun(image): return image.score(['glauconite', 'chlorite', 'epIdote', 'calcite', 'dolomite', 'an amphibole mineral']) 
iteration:  72 best program: def newfun(image): return image.score(['Interlocking Calcite Crystals', 'Interlocking Dolomite Crystals', 'Geodes', 'Crystals of Aragonite', 'Oolitic Limonite', 'Patches or bands of Chert']) 
iteration:  73 best program: def newfun(image): return image.score(['Interlocking Calcite Crystals', 'Interlocking Dolomite Crystals', 'Geodes', 'Crystals of Aragonite', 'Oolitic Limonite', 'Patches or bands of Chert']) 
iteration:  74 best program: def newfun(image): return image.score(['Interlocking Calcite Crystals', 'Interlocking Dolomite Crystals', 'Geodes', 'Crystals of Aragonite', 'Oolitic Limonite', 'Patches or bands of Chert']) 
iteration:  75 best program: def newfun(image): return image.score(['Interlocking Calcite Crystals', 'Interlocking Dolomite Crystals', 'Geodes', 'Crystals of Aragonite', 'Oolitic Limonite', 'Patches or bands of Chert']) 
iteration:  76 best program: def newfun(image): return image.score(['Interlocking Calcite Crystals', 'Interlocking Dolomite Crystals', 'Geodes', 'Crystals of Aragonite', 'Oolitic Limonite', 'Patches or bands of Chert']) 
iteration:  77 best program: def newfun(image): return image.score(['Interlocking Calcite Crystals', 'Interlocking Dolomite Crystals', 'Geodes', 'Crystals of Aragonite', 'Oolitic Limonite', 'Patches or bands of Chert']) 
iteration:  78 best program: def newfun(image): return image.score(['Interlocking Calcite Crystals', 'Interlocking Dolomite Crystals', 'Geodes', 'Crystals of Aragonite', 'Oolitic Limonite', 'Patches or bands of Chert']) 
iteration:  79 best program: def newfun(image): return image.score(['Interlocking Calcite Crystals', 'Interlocking Dolomite Crystals', 'Geodes', 'Crystals of Aragonite', 'Oolitic Limonite', 'Patches or bands of Chert']) 
iteration:  80 best program: def newfun(image): return image.score(['Interlocking Calcite Crystals', 'Interlocking Dolomite Crystals', 'Geodes', 'Crystals of Aragonite', 'Oolitic Limonite', 'Patches or bands of Chert']) 
iteration:  81 best program: def newfun(image): return image.score(['Interlocking Calcite Crystals', 'Interlocking Dolomite Crystals', 'Geodes', 'Crystals of Aragonite', 'Oolitic Limonite', 'Patches or bands of Chert']) 
iteration:  82 best program: def newfun(image): return image.score(['Interlocking Calcite Crystals', 'Interlocking Dolomite Crystals', 'Geodes', 'Crystals of Aragonite', 'Oolitic Limonite', 'Patches or bands of Chert']) 
iteration:  83 best program: def newfun(image): return image.score(['Interlocking Calcite Crystals', 'Interlocking Dolomite Crystals', 'Geodes', 'Crystals of Aragonite', 'Oolitic Limonite', 'Patches or bands of Chert']) 
iteration:  84 best program: def newfun(image): return image.score(['Interlocking Calcite Crystals', 'Interlocking Dolomite Crystals', 'Geodes', 'Crystals of Aragonite', 'Oolitic Limonite', 'Patches or bands of Chert']) 
iteration:  85 best program: def newfun(image): return image.score(['Interlocking Calcite Crystals', 'Interlocking Dolomite Crystals', 'Geodes', 'Crystals of Aragonite', 'Oolitic Limonite', 'Patches or bands of Chert']) 
iteration:  86 best program: def newfun(image): return image.score(['amphibole minerals', 'plagioclase', 'pyroxene minerals', 'olivine', 'a pyroxene']) 
iteration:  87 best program: def newfun(image): return image.score(['amphibole minerals', 'plagioclase', 'pyroxene minerals', 'olivine', 'a pyroxene']) 
iteration:  88 best program: def newfun(image): return image.score(['amphibole minerals', 'plagioclase', 'pyroxene minerals', 'olivine', 'a pyroxene']) 
iteration:  89 best program: def newfun(image): return image.score(['amphibole minerals', 'plagioclase', 'pyroxene minerals', 'olivine', 'a pyroxene']) 
iteration:  90 best program: def newfun(image): return image.score(['amphibole minerals', 'plagioclase', 'pyroxene minerals', 'olivine', 'a pyroxene']) 
iteration:  91 best program: def newfun(image): return image.score(['amphibole minerals', 'plagioclase', 'pyroxene minerals', 'olivine', 'a pyroxene']) 
iteration:  92 best program: def newfun(image): return image.score(['amphibole minerals', 'plagioclase', 'pyroxene minerals', 'olivine', 'a pyroxene']) 
iteration:  93 best program: def newfun(image): return image.score(['amphibole minerals', 'plagioclase', 'pyroxene minerals', 'olivine', 'a pyroxene']) 
iteration:  94 best program: def newfun(image): return image.score(['amphibole minerals', 'plagioclase', 'pyroxene minerals', 'olivine', 'a pyroxene']) 
iteration:  95 best program: def newfun(image): return image.score(['amphibole minerals', 'plagioclase', 'pyroxene minerals', 'olivine', 'a pyroxene']) 
iteration:  96 best program: def newfun(image): return image.score(['amphibole minerals', 'plagioclase', 'pyroxene minerals', 'olivine', 'a pyroxene']) 
iteration:  97 best program: def newfun(image): return image.score(['amphibole minerals', 'plagioclase', 'pyroxene minerals', 'olivine', 'a pyroxene']) 
iteration:  98 best program: def newfun(image): return image.score(['amphibole minerals', 'plagioclase', 'pyroxene minerals', 'olivine', 'a pyroxene']) 
iteration:  99 best program: def newfun(image): return image.score(['amphibole minerals', 'plagioclase', 'pyroxene minerals', 'olivine', 'a pyroxene']) 
iteration:  100 best program: def newfun(image): return image.score(['amphibole minerals', 'plagioclase', 'pyroxene minerals', 'olivine', 'a pyroxene']) 
iteration:  101 best program: def newfun(image): return image.score(['amphibole minerals', 'plagioclase', 'pyroxene minerals', 'olivine', 'a pyroxene']) 
iteration:  102 best program: def newfun(image): return image.score(['amphibole minerals', 'plagioclase', 'pyroxene minerals', 'olivine', 'a pyroxene']) 
iteration:  103 best program: def newfun(image): return image.score(['amphibole minerals', 'plagioclase', 'pyroxene minerals', 'olivine', 'a pyroxene']) 
iteration:  104 best program: def newfun(image): return image.score(['amphibole minerals', 'plagioclase', 'pyroxene minerals', 'olivine', 'a pyroxene']) 
iteration:  105 best program: def newfun(image): return image.score(['amphibole minerals', 'plagioclase', 'pyroxene minerals', 'olivine', 'a pyroxene']) 
iteration:  106 best program: def newfun(image): return image.score(['amphibole minerals', 'plagioclase', 'pyroxene minerals', 'olivine', 'a pyroxene']) 
iteration:  107 best program: def newfun(image): return image.score(['amphibole minerals', 'plagioclase', 'pyroxene minerals', 'olivine', 'a pyroxene']) 
iteration:  108 best program: def newfun(image): return image.score(['amphibole minerals', 'plagioclase', 'pyroxene minerals', 'olivine', 'a pyroxene']) 
iteration:  109 best program: def newfun(image): return image.score(['amphibole minerals', 'plagioclase', 'pyroxene minerals', 'olivine', 'a pyroxene']) 
iteration:  110 best program: def newfun(image): return image.score(['amphibole minerals', 'plagioclase', 'pyroxene minerals', 'olivine', 'a pyroxene']) 
iteration:  111 best program: def newfun(image): return image.score(['amphibole minerals', 'plagioclase', 'pyroxene minerals', 'olivine', 'a pyroxene']) 
iteration:  112 best program: def newfun(image): return image.score(['amphibole minerals', 'plagioclase', 'pyroxene minerals', 'olivine', 'a pyroxene']) 
iteration:  113 best program: def newfun(image): return image.score(['amphibole minerals', 'plagioclase', 'pyroxene minerals', 'olivine', 'a pyroxene']) 
iteration:  114 best program: def newfun(image): return image.score(['pyroxene minerals', 'amphibole minerals', 'opaque minerals', 'feldspar minerals', 'plagioclase']) 
iteration:  115 best program: def newfun(image): return image.score(['pyroxene minerals', 'amphibole minerals', 'opaque minerals', 'feldspar minerals', 'plagioclase']) 
iteration:  116 best program: def newfun(image): return image.score(['pyroxene minerals', 'amphibole minerals', 'opaque minerals', 'feldspar minerals', 'plagioclase']) 
iteration:  117 best program: def newfun(image): return image.score(['pyroxene minerals', 'amphibole minerals', 'opaque minerals', 'feldspar minerals', 'plagioclase']) 
iteration:  118 best program: def newfun(image): return image.score(['pyroxene minerals', 'amphibole minerals', 'opaque minerals', 'feldspar minerals', 'plagioclase']) 
iteration:  119 best program: def newfun(image): return image.score(['pyroxene minerals', 'amphibole minerals', 'opaque minerals', 'feldspar minerals', 'plagioclase']) 
iteration:  120 best program: def newfun(image): return image.score(['pyroxene minerals', 'amphibole minerals', 'opaque minerals', 'feldspar minerals', 'plagioclase']) 
iteration:  121 best program: def newfun(image): return image.score(['pyroxene minerals', 'amphibole minerals', 'opaque minerals', 'feldspar minerals', 'plagioclase']) 
iteration:  122 best program: def newfun(image): return image.score(['pyroxene minerals', 'amphibole minerals', 'opaque minerals', 'feldspar minerals', 'plagioclase']) 
iteration:  123 best program: def newfun(image): return image.score(['pyroxene minerals', 'amphibole minerals', 'opaque minerals', 'feldspar minerals', 'plagioclase']) 
iteration:  124 best program: def newfun(image): return image.score(['pyroxene minerals', 'amphibole minerals', 'opaque minerals', 'feldspar minerals', 'plagioclase']) 
iteration:  125 best program: def newfun(image): return image.score(['pyroxene minerals', 'amphibole minerals', 'opaque minerals', 'feldspar minerals', 'plagioclase']) 
iteration:  126 best program: def newfun(image): return image.score(['lichen', 'crustose lichens']) 
iteration:  127 best program: def newfun(image): return image.score(['lichen', 'crustose lichens']) 
iteration:  128 best program: def newfun(image): return image.score(['lichen', 'crustose lichens']) 
iteration:  129 best program: def newfun(image): return image.score(['lichen', 'crustose lichens']) 
iteration:  130 best program: def newfun(image): return image.score(['lichen', 'crustose lichens']) 
iteration:  131 best program: def newfun(image): return image.score(['lichen', 'crustose lichens']) 
iteration:  132 best program: def newfun(image): return image.score(['lichen', 'crustose lichens']) 
iteration:  133 best program: def newfun(image): return image.score(['lichen', 'crustose lichens']) 
iteration:  134 best program: def newfun(image): return image.score(['lichen', 'crustose lichens']) 
iteration:  135 best program: def newfun(image): return image.score(['crustose lichen', 'foliose lichen']) 
iteration:  136 best program: def newfun(image): return image.score(['crustose lichen', 'foliose lichen']) 
iteration:  137 best program: def newfun(image): return image.score(['crustose lichen', 'foliose lichen']) 
iteration:  138 best program: def newfun(image): return image.score(['crustose lichen', 'foliose lichen']) 
iteration:  139 best program: def newfun(image): return image.score(['crustose lichen', 'foliose lichen']) 
iteration:  140 best program: def newfun(image): return image.score(['crustose lichen', 'foliose lichen']) 
iteration:  141 best program: def newfun(image): return image.score(['crustose lichen', 'foliose lichen']) 
iteration:  142 best program: def newfun(image): return image.score(['crustose lichen', 'foliose lichen']) 
iteration:  143 best program: def newfun(image): return image.score(['lichens', 'foliose lichens']) 
iteration:  144 best program: def newfun(image): return image.score(['lichens', 'foliose lichens']) 
iteration:  145 best program: def newfun(image): return image.score(['lichens', 'foliose lichens']) 
iteration:  146 best program: def newfun(image): return image.score(['lichens', 'foliose lichens']) 
iteration:  147 best program: def newfun(image): return image.score(['lichens', 'foliose lichens']) 
iteration:  148 best program: def newfun(image): return image.score(['foliose lichens']) 
iteration:  149 best program: def newfun(image): return image.score(['foliose lichens']) 
iteration:  150 best program: def newfun(image): return image.score(['foliose lichens']) 
iteration:  151 best program: def newfun(image): return image.score(['foliose lichens']) 
iteration:  152 best program: def newfun(image): return image.score(['foliose lichens']) 
iteration:  153 best program: def newfun(image): return image.score(['foliose lichens']) 
iteration:  154 best program: def newfun(image): return image.score(['foliose lichens']) 
iteration:  155 best program: def newfun(image): return image.score(['foliose lichens']) 
iteration:  156 best program: def newfun(image): return image.score(['foliose lichens']) 
iteration:  157 best program: def newfun(image): return image.score(['foliose lichens']) 
iteration:  158 best program: def newfun(image): return image.score(['crustose lichens', 'crustose lichens (orange)']) 
iteration:  159 best program: def newfun(image): return image.score(['crustose lichens', 'crustose lichens (orange)']) 
iteration:  160 best program: def newfun(image): return image.score(['crustose lichens', 'crustose lichens (orange)']) 
iteration:  161 best program: def newfun(image): return image.score(['crustose lichens', 'crustose lichens (orange)']) 
iteration:  162 best program: def newfun(image): return image.score(['crustose lichens', 'crustose lichens (orange)']) 
iteration:  163 best program: def newfun(image): return image.score(['crustose lichens', 'crustose lichens (orange)']) 
iteration:  164 best program: def newfun(image): return image.score(['crustose lichens', 'crustose lichens (orange)']) 
iteration:  165 best program: def newfun(image): return image.score(['orange-colored lichens']) 
iteration:  166 best program: def newfun(image): return image.score(['orange-colored lichens']) 
iteration:  167 best program: def newfun(image): return image.score(['orange-colored lichens']) 
iteration:  168 best program: def newfun(image): return image.score(['orange-colored lichens']) 
iteration:  169 best program: def newfun(image): return image.score(['orange-colored lichens']) 
iteration:  170 best program: def newfun(image): return image.score(['orange-colored lichens']) 
iteration:  171 best program: def newfun(image): return image.score(['orange-colored lichens']) 
iteration:  172 best program: def newfun(image): return image.score(['orange-colored lichens']) 
iteration:  173 best program: def newfun(image): return image.score(['orange-colored lichens']) 
iteration:  174 best program: def newfun(image): return image.score(['orange-colored lichens']) 
iteration:  175 best program: def newfun(image): return image.score(['orange-colored lichens']) 
iteration:  176 best program: def newfun(image): return image.score(['orange-colored lichens']) 
iteration:  177 best program: def newfun(image): return image.score(['orange-colored lichens']) 
iteration:  178 best program: def newfun(image): return image.score(['a crustose lichen with white or yellow apothecia']) 
iteration:  179 best program: def newfun(image): return image.score(['a crustose lichen with white or yellow apothecia']) 
iteration:  180 best program: def newfun(image): return image.score(['a crustose lichen with white or yellow apothecia']) 
iteration:  181 best program: def newfun(image): return image.score(['a crustose lichen with white or yellow apothecia']) 
iteration:  182 best program: def newfun(image): return image.score(['a crustose lichen with white or yellow apothecia']) 
iteration:  183 best program: def newfun(image): return image.score(['a crustose lichen with white or yellow apothecia']) 
iteration:  184 best program: def newfun(image): return image.score(['a crustose lichen with white or yellow apothecia']) 
iteration:  185 best program: def newfun(image): return image.score(['a crustose lichen with white or yellow apothecia']) 
iteration:  186 best program: def newfun(image): return image.score(['a crustose lichen with white or yellow apothecia']) 
iteration:  187 best program: def newfun(image): return image.score(['a crustose lichen with white or yellow apothecia']) 
iteration:  188 best program: def newfun(image): return image.score(['a crustose lichen with white or yellow apothecia']) 
iteration:  189 best program: def newfun(image): return image.score(['a crustose lichen with white or yellow apothecia']) 
iteration:  190 best program: def newfun(image): return image.score(['a crustose lichen with white or yellow apothecia']) 
iteration:  191 best program: def newfun(image): return image.score(['a crustose lichen with white or yellow apothecia']) 
iteration:  192 best program: def newfun(image): return image.score(['a crustose lichen with white or yellow apothecia']) 
iteration:  193 best program: def newfun(image): return image.score(['a crustose lichen with white or yellow apothecia']) 
iteration:  194 best program: def newfun(image): return image.score(['crustose lichens (yellow or orange)']) 
iteration:  195 best program: def newfun(image): return image.score(['crustose lichens (yellow or orange)']) 
iteration:  196 best program: def newfun(image): return image.score(['crustose lichens (yellow or orange)']) 
iteration:  197 best program: def newfun(image): return image.score(['crustose lichens (yellow or orange)']) 
iteration:  198 best program: def newfun(image): return image.score(['crustose lichens (yellow or orange)']) 
iteration:  199 best program: def newfun(image): return image.score(['crustose lichens (yellow or orange)']) 
