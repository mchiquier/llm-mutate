iteration: 0 generation: def newfun(image): return image.score(['a wood or plastic handle', 'a worn, aged appearance', 'three parts: base, shaft, and crown', 'a small, cushioned seat', 'a tight-fitting garment', 'a brown, furry body'])
iteration: 1 generation: def newfun(image): return image.score(['covered in brightly colored decorations', 'a carved, wooden figurehead', 'orange, yellow, or green skin', 'usually includes a list of ingredients or instructions', 'held in one hand like a paddle', 'curved or angled wings'])
iteration: 2 generation: def newfun(image): return image.score(['a collar or lapels', 'valuable minerals or metals', 'black, grey, or green', 'opaque material', 'electrical contacts', 'a whip antenna'])
iteration: 3 generation: def newfun(image): return image.score(['hexagonal shape', 'made of wood', 'a fungus that grows on the surface', 'often with a long, thin neck', 'studio or workshop', 'a room or space with tables, chairs, and other objects'])
iteration: 4 generation: def newfun(image): return image.score(['a saddle-shaped object', 'often features a coastline, mountains, or other landscape', 'an ornamental knob on top', 'a wall with large stones or rocks', 'a nodding donkey', 'chaise lounge'])
iteration: 5 generation: def newfun(image): return image.score(['a stylized hand or paw', 'typically set on a green lawn or grass', 'a pathway or walkway', 'made of concrete, stone, or wood', 'people or objects are often depicted', 'usually outdoor'])
iteration: 6 generation: def newfun(image): return image.score(['a long, thin piece of wood', 'supported by a spine or vertebral column', 'a cap or cover', 'a banister or railing', 'the head of a hammer', 'poles used for jumping'])
iteration: 7 generation: def newfun(image): return image.score(['usually made from grass', 'made of foam', 'areas made of gold, silver, or bronze', 'certainty, mystery, and enigma', 'the image is usually taken from profil', 'cellular windows'])
iteration: 8 generation: def newfun(image): return image.score(['black or yellow fur', 'may have a cork', 'a ridged or fluted shaft', 'a tall, vertical stone structure', 'a hoop or ring', 'may have lines, stripes, or other markings'])
iteration: 9 generation: def newfun(image): return image.score(['a recessed area in the top for holding a coin', 'blocks of powdered paint', 'part of a train', 'a stick or handle', 'fishing gear', 'spring-loaded handle'])
iteration: 10 generation: def newfun(image): return image.score(['plastic or leather', 'made from hay or straw', 'lined with lichen or moss', 'under the chin', 'has his nose out of joint', 'having a number of archaic symbols carved into it'])
iteration: 11 generation: def newfun(image): return image.score(['a thin rim', 'a peak or ridge', 'a light source', 'a green felt surface', 'ornate, carved details', 'a modular design'])
iteration: 12 generation: def newfun(image): return image.score(['ladder-like', 'metal grills', 'curls or waves', 'block letters', 'an arch or a dome', 'swirls or waves'])
iteration: 13 generation: def newfun(image): return image.score(['bright red, yellow, or green', 'tall, thin trees', 'metal or stone', 'has a knob or grip for opening', ' a sprocket or chain', 'one or more reflectors'])
iteration: 14 generation: def newfun(image): return image.score(['a stylized hand or paw', 'typically set on a green lawn or grass', 'a pathway or walkway', 'made of concrete, stone, or wood', 'people or objects are often depicted', 'usually outdoor'])
iteration: 15 generation: def newfun(image): return image.score(['blue and yellow markings', 'the head of a hammer', 'red liquid', ' opposition pushes the mound toward area containing some water', 'a circular, metallic case', 'serves as a sealant'])
iteration: 16 generation: def newfun(image): return image.score(['a decorative topping or finial', 'composed of layers of stone or brick', 'speckled or spotted body', 'three concentric rings in various colors', 'a dome-shaped structure', 'may have steps or seats'])
iteration: 17 generation: def newfun(image): return image.score(['a dense landscape of assorted, irregularly-shaped stones', 'a temperature readout', 'a waxy coating', 'a plastic or rubber hose', 'has small nodes or buds', 'an hourglass shape'])
iteration: 18 generation: def newfun(image): return image.score(['a metal handle', 'a significant change in color', 'a combination of wood and fabric', 'a flap-like feature', 'a golden or metallic color', 'a tightly wound spring'])
iteration: 19 generation: def newfun(image): return image.score(['the tree is deciduous', 'rocks, soil, or other landscaping elements', 'made of fabric and often has a zipper', 'has a truck', 'a club or bat', 'sand, pebbles, or other abrasive elements'])
iteration: 20 generation: def newfun(image): return image.score(['a dense landscape of assorted, irregularly-shaped stones', 'a temperature readout', 'a waxy coating', 'a plastic or rubber hose', 'has small nodes or buds', 'an hourglass shape'])
iteration: 21 generation: def newfun(image):    return image.score(['curved blade', 'yellow, orange, or red', 'animal figures', ' Fine Art', 'bright blue', 'vegetables'])
iteration: 22 generation: def newfun(image): return image.score(['shiny, dark surface', 'white, yellow, or pink flowers', 'raised ridges or veins', 'long, pointed sleeves', 'often found in religious settings', 'jousting or combat'])
iteration: 23 generation: def newfun(image): return image.score(['held against a hard surface and struck with a hammer', 'отMount Fujiда image', 'lace sometimes forms part of a wedding dress', 'an old, dusty book', 'clear liquid', 'attached to the camera using a tripod mount'])
iteration: 24 generation: def newfun(image): return image.score(['green felt-covered table', 'white, powdered sugar', 'hydraulic system', 'interlocking pieces', 'portrays images of people', 'upper torso of a humanoid figure'])
iteration: 25 generation: def newfun(image): return image.score(['green felt-covered table', 'white, powdered sugar', 'hydraulic system', 'interlocking pieces', 'portrays images of people', 'upper torso of a humanoid figure'])
iteration: 26 generation: def newfun(image): return image.score([' Lombardy poplar', 'english elm', 'a person is buried here', 'part of a fence', 'gold, silver, or copper', 'venation patterns'])
iteration: 27 generation: def newfun(image): return image.score(['a surface made of metallic tiles', 'a person sitting on it', 'armrests', 'often kept in wood or metallic things', 'cushions or upholstery', 'rollers or tracks'])
iteration: 28 generation: def newfun(image): return image.score(['covered in brightly colored decorations', 'a carved, wooden figurehead', 'orange, yellow, or green skin', 'usually includes a list of ingredients or instructions', 'held in one hand like a paddle', 'curved or angled wings'])
iteration: 29 generation: def newfun(image): return image.score(['rocky landscape', 'silver or gray in color', 'a surface that is slanted at an angle', 'covered in stylized patterns', 'polyhedral shapes', 'often used in mathematical art'])
iteration: 30 generation: def newfun(image): return image.score(['a portable electric lamp', 'quartz or other minerals', 'beveled or faceted edges', 'a piece of pottery', 'a picture or other design on the front', 'may be decorated with scrollwork or other carvings'])
iteration: 31 generation: def newfun(image): return image.score(['a cityscape', 'awning', 'a car', 'ruffles', 'lace', 'ornamental cabbage'])
iteration: 32 generation: def newfun(image): return image.score(['a vegetable pulp or fiber', 'may have a rent apron or bib', 'yellow or cream', 'aluminum foil', 'came from Austria', 'edible'])
iteration: 33 generation: def newfun(image): return image.score(['lined with fabric', 'orange, or golden color', 'animal fur', 'sand or soil texture', 'bits of dried algae', 'several rows of small, spiky projections'])
iteration: 34 generation: def newfun(image): return image.score(['typically contains locks', 'a person climbing up', 'a board or platform', 'a type of continental marginal deposit', 'a strong or hard material', 'a generally vertical surface'])
iteration: 35 generation: def newfun(image): return image.score(['ornaments', 'heart-shaped', 'mattress', 'column', 'flowers', 'Maenads'])
iteration: 36 generation: def newfun(image): return image.score(['often decorated with precious stones', 'ornate and decorative', 'locations with cliffs, rocks, and large trees', 'holes on opposite sides', 'hard grounds', 'canyons and natural rock formations'])
iteration: 37 generation: def newfun(image): return image.score(['carved in low relief', 'made of marble, granite, or sandstone', 'separate, curved sections', 'compact, dense foliage', 'has prominent, spreading branches', 'rocky and steep'])
iteration: 38 generation: def newfun(image): return image.score(['soiled or stained', 'discarded', 'peeling paint or wallpaper', 'exposed brick', 'cement or tar', 'scrap'])
iteration: 39 generation: def newfun(image): return image.score(['may have a peak or a flat top', 'sandstone, limestone, marble, granite, or other rock', 'a highly specialized sewing machine', ' obliquely angled', 'a bicycle, unicycle, or other vehicle with one wheel', 'a heavy, square or hexagonal table leg'])
iteration: 40 generation: def newfun(image): return image.score(['black or yellow fur', 'may have a cork', 'a ridged or fluted shaft', 'a tall, vertical stone structure', 'a hoop or ring', 'may have lines, stripes, or other markings'])
iteration: 41 generation: def newfun(image): return image.score(['cylindrical or conical', 'pebbles or cobbles', 'topographically complex', 'registered', 'moss or lichen', 'elliptical cross section'])
iteration: 42 generation: def newfun(image): return image.score(['a maple, oak, or beech tree', 'a statue or other sculpted figure', 'a telephone pole and wires', 'a fire hydrant', 'a sewer grate', 'a small shrub or bush'])
iteration: 43 generation: def newfun(image): return image.score(['soiled or stained', 'discarded', 'peeling paint or wallpaper', 'exposed brick', 'cement or tar', 'scrap'])
iteration: 44 generation: def newfun(image): return image.score(['a furry body', 'made by dripping molten glass', 'banana-shaped', 'cement or asphalt surface', 'part of a golf course', ' vescovinience'])
iteration: 45 generation: def newfun(image): return image.score(['floral print', 'may be used to unlock a door or bicycle', 'ribbon curls', 'white, rectangular teeth', 'shaggy fur', 'a red rose'])
iteration: 46 generation: def newfun(image): return image.score(['patterned with hexagons', 'textile', 'a spiral design', 'a buckle', 'hand-painted flowers', 'a small car or truck'])
iteration: 47 generation: def newfun(image): return image.score(['thin, fluffy clouds', 'snow-capped mountains', 'green grass', 'moss or lichen', 'cement or asphalt', 'may be a mailbox or fire hydrant nearby'])
iteration: 48 generation: def newfun(image): return image.score(['a rectangular or square shape', 'a playground slide', 'a chimney', 'a roof with shingles or tiles', 'a foundation or base', 'a driveway or road'])
iteration: 49 generation: def newfun(image): return image.score(['gray or brown rocks', 'gravel', 'a mixture of sand and pebbles', 'a waterfall or stream', 'tall trees', 'a wooden footbridge'])
iteration: 50 generation: def newfun(image): return image.score(['rows of seats', 'steps or risers', 'tufts of grass', 'worn or weathered appearance', 'a pile of rocks or logs', 'labels or signs'])
iteration: 51 generation: def newfun(image): return image.score(['metallic with a g limb', 'mallet or hammer', 'columns or posts', 'ornate carvings or statues', 'coins or tokens', 'arcade machine'])
iteration: 52 generation: def newfun(image): return image.score(['a series of concentric circles', 'a surface entirely obscured by small objects', 'stones or bricks', 'a distinctive fungus', 'a round roof', 'linen'])
iteration: 53 generation: def newfun(image): return image.score(['tall', 'a blue-green oxide mineral', 'encrusts surrounding rock', 'flow or fluid dynamics', 'a white or whitish mineral', 'a coarse-grained rock'])
iteration: 54 generation: def newfun(image): return image.score(['mountains in the background', 'stranded trees', 'logging or mining equipment', 'a rock or concrete structure', 'three-pronged', 'dry conditions'])
iteration: 55 generation: def newfun(image): return image.score(['chrome yellow', 'naples yellow', 'vermilion red', 'verdigris green', 'burnt sienna', 'crimson lake'])
iteration: 56 generation: def newfun(image): return image.score(['polished stone', 'have vertical supports', 'wrap-around porch', 'columnar legs', 'usually made of wood or metal', 'may be freestanding'])
iteration: 57 generation: def newfun(image): return image.score([' osage orange', 'lead pencil', ' oil paint', ' mistletoe', 'a collection of similar objects', 'birch bark'])
iteration: 58 generation: def newfun(image): return image.score(['powdered cosmetics', 'molded seats', 'rotten wood', 'hand-carved', 'engraved', 'hand-blown glass'])
iteration: 59 generation: def newfun(image): return image.score(['sandstone', 'limestone', 'granite', 'basalt', 'schist', 'gneiss'])
iteration: 60 generation: def newfun(image): return image.score(['brick-red', 'grey-brown', 'speckled', 'a splash of yellow', 'autumn leaves', 'moss'])
iteration: 61 generation: def newfun(image): return image.score(['broken or cracked', 'mineral deposits or rock formations', 'a church or other religious building', 'a display of various ducks', 'a decorativeDynamicstamp on the floor', 'a blacksmith proprietor'])
iteration: 62 generation: def newfun(image): return image.score(['pebbles', 'stones', 'logs', 'a fallen tree', 'roots or branches', 'a serene or picturesque scene'])
iteration: 63 generation: def newfun(image): return image.score(['a maple leaf', 'a pine tree', 'a fir tree', 'a redwood tree', 'a tree stump', 'a forest in the background'])
iteration: 64 generation: def newfun(image): return image.score(['a castle-like structure', 'rows or strips of vegetation', 'oil, vinegar, or accusateur', 'covered in moss or lichen', 'a person in the foreground', 'stick-like extensions'])
iteration: 65 generation: def newfun(image): return image.score(['bluish-green mineral', 'bluish-grey mineral', 'reddish-brown mineral', 'greyish-green mineral', 'greyish-blue mineral', 'translucent mineral'])
iteration: 66 generation: def newfun(image): return image.score(['a birch tree', 'a willow tree', 'a beech tree', 'a bo tree', 'a magnolia tree', 'a bonsai tree'])
iteration: 67 generation: def newfun(image): return image.score(['an elephant', 'a cliff anvil', 'anvil-shaped', 'an upper and a lower', 'spinous processes', 'a vertical crack'])
iteration: 68 generation: def newfun(image): return image.score(['looking worn or weathered', 'lines or stripes', 'sandstone, limestone, or granite', 'lines or veins', 'spiral or helical design', 'brass, bronze, or copper'])
iteration: 69 generation: def newfun(image): return image.score(['coins or tokens', 'arcade machine', 'ornate carvings or statues', 'columns or posts', 'mallet or hammer', 'metallic with a g limb'])
iteration: 70 generation: def newfun(image): return image.score(['cylindrical or conical', 'pebbles or cobbles', 'topographically complex', 'registered', 'moss or lichen', 'elliptical cross section'])
iteration: 71 generation: def newfun(image):    return image.score(['a birch tree', 'a willow tree', 'a beech tree', 'a bo tree', 'a magnolia tree', 'a bonsai tree'])
iteration: 72 generation: def newfun(image): return image.score(['moss, lichen, or similar organisms', 'a single, pointed tooth', 'found in caves or deep crevices', 'a large, fiery explosion', 'spiky, metallic pieces', ' ASCII art'])
iteration: 73 generation: def newfun(image): return image.score(['iron rich', 'pyritic', 'copper bearing', 'argentiferous', 'gold containing', 'uranium laden'])
iteration: 74 generation: def newfun(image): return image.score(['silver or golden color', 'heavy and ornate', 'block-like shape', 'uppermost part', 'column or post', 'covered in gems or glitter'])
iteration: 75 generation: def newfun(image): return image.score(['straight or curved walls', 'heavy steel or concrete', 'a large foundation', 'may have a fence', 'mortar or concrete', 'has windows and a door'])
iteration: 76 generation: def newfun(image): return image.score(['a pine tree', 'a spruce tree', 'a fir tree', 'a cedar tree', 'a cypress tree', 'a redwood tree'])
iteration: 77 generation: def newfun(image): return image.score(['standing stone', 'gravestone', 'petroglyph', 'stone circle', 'menhir', 'dolmen'])
iteration: 78 generation: def newfun(image): return image.score(['a maple tree', 'a cherry tree', 'a pine tree', 'bright autumn colors', 'evergreen needles', 'pine cones'])
iteration: 79 generation: def newfun(image): return image.score(['mountains in the background', 'stranded trees', 'logging or mining equipment', 'a rock or concrete structure', 'three-pronged', 'dry conditions'])
iteration: 80 generation: def newfun(image): return image.score(['moss', 'lichens', 'bracket fungi', 'puffballs', 'morels', 'truffles'])
iteration: 81 generation: def newfun(image): return image.score(['grass', 'granite', 'cedar', 'bark', 'moss', 'a tree stump'])
iteration: 82 generation: def newfun(image): return image.score(['lichen', 'moss', 'algae', 'bark', 'twigs', 'a rock or outcropping'])
iteration: 83 generation: def newfun(image): return image.score(['a large carving of a bear', 'An octagonal table', 'a brass doorknob', 'topiary', 'zero vertical edges', 'neon sign'])
iteration: 84 generation: def newfun(image): return image.score(['granite, basalt, or diorite', 'a rock formation', 'contains quartz', 'a collectible mineral specimen', 'a dark-colored mineral', 'a volcanic rock'])
iteration: 85 generation: def newfun(image): return image.score(['sandstone', 'shale', 'limestone', 'granite', 'diorite', 'basalt'])
iteration: 86 generation: def newfun(image): return image.score(['ripples in water', 'a dock or pier', 'some trees or bushes', 'a sun of brightness', 'a wrought iron gate', 'lichen or moss'])
iteration: 87 generation: def newfun(image): return image.score(['metallic minerals', 'a type of underground opening', 'typically found in sedimentary rock', 'a dark, shiny mineral', 'a ore mineral', 'forms economic deposits'])
iteration: 88 generation: def newfun(image): return image.score(['iron rich', 'pyritic', 'copper bearing', 'argentiferous', 'gold containing', 'uranium laden'])
iteration: 89 generation: def newfun(image): return image.score(['lichen', 'moss', 'algae', 'bark', 'twigs', 'a stone wall or path'])
iteration: 90 generation: def newfun(image): return image.score(['holly bushes', 'written or drawn on a blackboard', 'worn or weathered surface', 'sand or pebbles', 'tracks or footprints', 'some trees'])
iteration: 91 generation: def newfun(image): return image.score(['lichen covered rocks', 'lichen on rocks', 'moss growing on rocks', 'moss on trees', 'lichen on tree bark', 'moss-covered trees'])
iteration: 92 generation: def newfun(image): return image.score(['trunks of trees', 'a lawn', 'block paving', 'a basketball hoop', 'a gravestone', 'a telephone booth'])
iteration: 93 generation: def newfun(image): return image.score(['animal fur', 'wool or woven wool', 'a window or other opening in a wall', 'neatly dressed stone', 'perpendicular', 'green or yellow fabric'])
iteration: 94 generation: def newfun(image): return image.score(['pyroxene', 'amphibole', 'olivine', 'biotite', 'a+ Pyroxene', 'a hornblende'])
iteration: 95 generation: def newfun(image): return image.score(['diatoms', 'spores', 'pollen', 'xylem', 'phloem', 'cellulose'])
iteration: 96 generation: def newfun(image): return image.score(['lichen', 'moss', 'algae', 'fungi', 'lichens', 'mosses'])
iteration: 97 generation: def newfun(image): return image.score(['lichen', 'moss', 'algae', 'bark', 'twigs', 'a stone wall or path', 'has buttons', 'zip closure', 'served with a side of ranch or blue cheese dressing'])
iteration: 98 generation: def newfun(image): return image.score(['moss', 'lichen', 'lichen and moss', 'algae', 'lichens', 'fungi'])
iteration: 99 generation: def newfun(image): return image.score(['sandstone texture', 'columns or pilasters', 'a frieze or entablature', 'forms an archway', 'statues or sculptures', 'a public building'])
iteration: 100 generation: def newfun(image): return image.score(['moss', 'lichens', 'bracket fungi', 'puffballs', 'morels', 'truffles'])
iteration: 101 generation: def newfun(image): return image.score(['granite', 'diorite', 'gabbro', 'anorthosite', 'basalt', 'pegmatite'])
iteration: 102 generation: def newfun(image): return image.score(['fresco', 'gilded details', 'carved lions', 'columns', 'a large or impressive entrance', 'granite'])
iteration: 103 generation: def newfun(image): return image.score(['moss', 'lichen', 'lichen and moss', 'algae', 'lichens', 'fungi'])
iteration: 104 generation: def newfun(image): return image.score(['a tree trunk', 'a fruity or floral scent', 'leaves with jagged edges', 'ère flowers or spikes', 'smooth, fibrous bark', 'a plaque or plate'])
iteration: 105 generation: def newfun(image): return image.score(['pyroxene', 'amphibole', 'biotite', 'feldspar', 'quartz', 'mica'])
iteration: 106 generation: def newfun(image): return image.score(['fine-grained foliated metamorphic rock', 'coarse-grained foliated metamorphic rock', 'non-foliated metamorphic rock', 'fine-grained non-foliated metamorphic rock', 'a process of drilling', 'usually off-white, can have a shiny surface'])
iteration: 107 generation: def newfun(image): return image.score(['a garden feature', 'granite or sandstone', 'moss, lichen, or ferns', 'usually round or oval', 'May have water or moss inside', 'a small opening'])
iteration: 108 generation: def newfun(image): return image.score(['coniferous trees', 'deciduous trees', 'bushes', 'grasses', 'moss', 'lichen'])
iteration: 109 generation: def newfun(image): return image.score(['blades of grass', 'basalt', 'malachite', ' granite', 'sandstone', ' concrete'])
iteration: 110 generation: def newfun(image): return image.score(['diorite', 'andesite', ' gabbro', 'peridotite', 'eclogite', 'pyroxene'])
iteration: 111 generation: def newfun(image): return image.score(['sandstone', 'limestone', 'granite', 'diorite', 'basalt', 'pumice'])
iteration: 112 generation: def newfun(image): return image.score(['bleached bone white', 'bone shades', 'moss or peat', 'lichen-covered rocks', 'mud or clay', 'iron oxide red'])
iteration: 113 generation: def newfun(image): return image.score(['basalt columns', 'igneous rock', 'volcanic rock', 'extrusive igneous rock', 'intrusive igneous rock', 'feldspar'])
iteration: 114 generation: def newfun(image): return image.score(['lichen', 'moss', 'algae', 'a tarn', 'barnacles', 'a rock pool'])
iteration: 115 generation: def newfun(image): return image.score(['lichen covered rock', 'lichen covered tree', 'lichen covered branch', 'a fallen log', 'a fallen tree', 'a stump'])
iteration: 116 generation: def newfun(image): return image.score(['apatite', 'feldspar', 'biotite', 'amphibole', 'pyroxene', 'olivine'])
iteration: 117 generation: def newfun(image): return image.score(['moss', 'lichen', 'fungi', 'algae', 'granite', 'quartz'])
iteration: 118 generation: def newfun(image): return image.score(['quartz', 'orthoclase', 'plagioclase', 'hornblende', ' pyroxene', 'b pyroxene'])
iteration: 119 generation: def newfun(image): return image.score(['lichen', 'moss', 'algae', 'bark', 'twigs', 'a rock or outcropping'])
iteration: 120 generation: def newfun(image): return image.score(['sphalerite (zinc sulfide)', 'pyrite (iron sulfide)', 'galena (lead sulfide)', 'chalcopyrite (copper sulfide)', 'bornite (copper sulfide)', 'tetrahedrite (copper sulfide)'])
iteration: 121 generation: def newfun(image): return image.score(['porous', 'large crystals', 'coarse-grained', 'metamorphic rocks', 'igneous rocks', 'sedimentary rocks'])
iteration: 122 generation: def newfun(image): return image.score(['blue-green mineral', 'bluish-green mineral', 'a brown mineral', 'a black mineral', 'a white mineral', 'mineral formations meeting at a point'])
iteration: 123 generation: def newfun(image): return image.score(['a poplar tree', 'willow tree', 'sycamore tree', 'cedar tree', ' horse chestnut', 'flowers on branches'])
iteration: 124 generation: def newfun(image): return image.score(['lichen', 'tree bark', 'twigs', 'roots', 'mosses', 'lichen covered trees'])
iteration: 125 generation: def newfun(image): return image.score(['moss', 'lichen', 'twigs', 'algae', 'bark', 'pyroxene'])
iteration: 126 generation: def newfun(image): return image.score(['a picket fence', 'a split-rail fence', 'a timber fence', 'a post-and-lintel fence', 'usually brown or gray', 'a decorative gate'])
iteration: 127 generation: def newfun(image): return image.score(['feldspar', 'hornblende', 'pyroxene', 'amphibole', 'biotite', 'chlorite'])
iteration: 128 generation: def newfun(image): return image.score(['sandstone', 'a landform', 'sharp or jagged edges', 'sycamore trees', 'a dead tree', 'limestone'])
iteration: 129 generation: def newfun(image): return image.score(['lichen', 'cobblestones', 'bricks', 'a gelatinous coating', 'mosses', 'lichens'])
iteration: 130 generation: def newfun(image): return image.score(['extremely hot', 'found in askania-neser-biosfera', 'ejecta blanket is visible', 'may include olivine', 'density in g/cm3: 3.34-3.43', 'ozon layer is present'])
iteration: 131 generation: def newfun(image): return image.score(['a fern', 'a moss', 'a lichen', 'a horsetail', 'a club moss', 'a spikemoss'])
iteration: 132 generation: def newfun(image): return image.score(['part of a fence', 'birch', 'a bench or chair', 'may have a birdhouse or feeder', 'trees or shrubs', 'a pathway'])
iteration: 133 generation: def newfun(image): return image.score(['lichen covered rocks', 'lichen on rocks', 'moss growing on rocks', 'moss on trees', 'lichen on tree bark', 'moss-covered trees'])
iteration: 134 generation: def newfun(image): return image.score(['lichen', 'moss', 'algae', 'bark', 'twigs', 'pyroxene', 'served with a side of ranch or blue cheese dressing'])
iteration: 135 generation: def newfun(image): return image.score(['lichen', 'mistletoe', 'lichens', 'lichens and moss', 'mosses and liverworts', 'lichens or moss'])
iteration: 136 generation: def newfun(image): return image.score(['limestone', 'granite', 'sandstone', 'shale', 'diorite', 'gneiss'])
iteration: 137 generation: def newfun(image): return image.score(['a type of fern', 'lichens', 'a mossy carpet', 'club mosses', 'grows along streams', 'bryophyte'])
iteration: 138 generation: def newfun(image): return image.score(['a floral or natural pattern', 'a thatched roof', 'a tree in the center', 'cloth or paper', 'support posts', 'a rather wide base'])
iteration: 139 generation: def newfun(image): return image.score(['a deciduous tree', 'rocks or soil', 'a stump', 'some dead branches', 'lichen covered', 'a broken branch'])
iteration: 140 generation: def newfun(image): return image.score(['extrusive igneous rock', 'intrusive igneous rock', 'sedimentary rock', 'metamorphic rock', 'can be foliated', 'can be nonfoliated'])
iteration: 141 generation: def newfun(image): return image.score(['several strike-slip faults', 'normal faults', 'a mountain range', 'parallel folds', 'an island arc', 'Precambrian rock'])
iteration: 142 generation: def newfun(image): return image.score(['ripples in water', 'a dock or pier', 'some trees or bushes', 'a sun of brightness', 'a wrought iron gate', 'lichen or moss'])
iteration: 143 generation: def newfun(image): return image.score(['algae', 'lichen', 'moss', 'lichens', 'bracket fungi', 'puffballs'])
iteration: 144 generation: def newfun(image): return image.score(['moss or lichen', 'a few scattered trees', 'snowdrifts', 'a stream or creek', 'lichen or moss', 'may have a Mountain or hill in the background'])
iteration: 145 generation: def newfun(image): return image.score(['moss', 'lichens', 'bracket fungi', 'puffballs', 'morels', 'truffles'])
iteration: 146 generation: def newfun(image): return image.score(['limestone', 'granite', 'marble', 'sandstone', 'basalt'])
iteration: 147 generation: def newfun(image): return image.score(['mossy, lichen-covered', 'peeling', 'split or broken', 'extremely worn', 'dull', 'splotchy'])
iteration: 148 generation: def newfun(image): return image.score(['sap or resin', 'lichen', 'moss', 'basalt', 'granite', ' schist'])
iteration: 149 generation: def newfun(image): return image.score(['apatite', 'feldspar', 'biotite', 'amphibole', 'pyroxene', 'olivine'])
iteration: 150 generation: def newfun(image): return image.score(['a coastline', 'a frozen waterfall', 'black basalt rock', 'ochre or yellow-brown earth', 'a canon or howitzer', 'a rock or sand beach'])
iteration: 151 generation: def newfun(image): return image.score(['limonite', 'goethite', 'hematite', 'malachite', 'azurite'])
iteration: 152 generation: def newfun(image): return image.score(['mushrooms', 'fungi', 'lichens', 'moss', 'leaves', 'algae'])
iteration: 153 generation: def newfun(image): return image.score([' moss hanging from trees', 'moss hanging from branches', 'moss on tree branches', 'moss on the ground', 'moss-covered forest floor', 'a dense grove of mature trees'])
iteration: 154 generation: def newfun(image): return image.score(['a dense stands of mature conifers', 'moss-covered forest floor', 'moss on trees', 'moss on branches', 'moss hanging from trees', 'moss hanging from branches'])
iteration: 155 generation: def newfun(image): return image.score(['lichen covered stone', 'lichen covered boulder', 'lichen covered ledge', 'lichen covered outcropping', 'lichen covered hillside', 'lichen covered mountain'])
iteration: 156 generation: def newfun(image): return image.score(['lichen', 'mistletoe', 'lichens', 'lichens and moss', 'mosses and liverworts', 'lichens or moss'])
iteration: 157 generation: def newfun(image): return image.score(['moss covering trees', 'moss carpeting forest floor', 'moss on branches', 'moss on trunks', 'lichen on trees', 'lichen on branches'])
iteration: 158 generation: def newfun(image): return image.score(['moss-covered trees', 'lichen on trees', 'fences', ' paths', 'benches', 'nature reserve'])
iteration: 159 generation: def newfun(image): return image.score(['a crustose lichen', 'a foliose lichen', 'a fructose lichen', 'an apothecium', 'a medulla', 'a hypothecium'])
iteration: 160 generation: def newfun(image): return image.score(['worn smooth by weathering', 'al grounds soft and mossy', 'low relief', 'engraved inscription', 'moss, lichen, or similar organisms', 'initials carved into the stone'])
iteration: 161 generation: def newfun(image): return image.score(['moss', 'lichens growing on trees', 'lichen-covered tree bark', 'moss-covered tree bark', 'lichens or moss growing on soil', 'soil covered with lichen'])
iteration: 162 generation: def newfun(image): return image.score(['lichen', 'moss', 'twigs', 'sticks', 'roots', 'bark'])
iteration: 163 generation: def newfun(image): return image.score(['lichen covered trees', 'lichen covered rocks', 'moss covered trees', 'moss covered rocks' , 'twigs covered in lichen', 'twigs covered in moss'])
iteration: 164 generation: def newfun(image): return image.score(['tall deciduous trees', 'shrubs', 'a stone wall', 'a small pond or pool', 'moss or lichen', 'some delicate trees'])
iteration: 165 generation: def newfun(image): return image.score(['sulfur crystals', ' native sulfur', 'sulfur springs', 'yellow sulfur', 'sulfur flowers', 'sulfur beds'])
iteration: 166 generation: def newfun(image): return image.score(['a fence post', 'posts and crossbeams', ' logged-in wood', 'axes', 'saws', 'a burl'])
iteration: 167 generation: def newfun(image): return image.score(['lichen', 'moss', 'algae', 'twigs', 'bark'])
iteration: 168 generation: def newfun(image): return image.score(['fungi', 'lichen', 'moss', 'algae', 'bryophytes', 'pteridophytes'])
iteration: 169 generation: def newfun(image): return image.score(['fungi', 'lichens', 'mosses', 'algae', 'lichens and mosses', 'lichenized fungi'])
iteration: 170 generation: def newfun(image): return image.score(['a northern forest', 'moss on rocks', 'moss on logs', 'moss on tree stumps', 'moss in streams', 'moss in a marsh'])
iteration: 171 generation: def newfun(image): return image.score(['moss covered trees', 'moss covered rocks', 'lichens on trees' , 'lichens on rocks', ' réseau or furrows', 'recessed center'])
iteration: 172 generation: def newfun(image): return image.score(['lichen and moss', 'lichen', 'moss', 'algae', ' ID', ' pale yellow to deep orange'])
iteration: 173 generation: def newfun(image): return image.score(['algae covered rocks', 'algae growing on rocks', 'algae on trees', 'algae in water', 'algae blooms', 'algae syndrome'])
iteration: 174 generation: def newfun(image): return image.score(['', 'lichen', 'a foliose lichen', 'a crustose lichen', 'a fructose lichen', 'a rock'])
iteration: 175 generation: def newfun(image): return image.score(['moss', 'lichens', 'bracket fungi', 'puffballs', 'morels', 'truffles'])
iteration: 176 generation: def newfun(image): return image.score(['lichen on rocks', 'lichen on bark', 'lichen on twigs', 'lichen on leaves', 'lichen on grass', 'lichen on other lichens'])
iteration: 177 generation: def newfun(image): return image.score(['thatch', 'wicker', 'solid wood', 'animal fur', 'a fungus', 'a lichen'])
iteration: 178 generation: def newfun(image): return image.score(['waterfall', 'boulders', 'rock formation', 'granite', 'green', 'lichen'])
iteration: 179 generation: def newfun(image): return image.score(['a dense stand of mature deciduous trees', 'moss-covered forest floor', 'moss on trees', 'moss on branches', 'moss hanging from trees', 'moss hanging from branches'])
iteration: 180 generation: def newfun(image): return image.score(['iron oxide rich', 'feldspar rich', 'biotite rich', 'pyroxene rich', 'amphibole rich', 'orthoclase rich'])
iteration: 181 generation: def newfun(image): return image.score(['lichen covered branches', 'moss covered branches', 'lichen covered tree bark', 'moss covered tree bark', 'lichen covered rocks', 'moss covered rock surfaces'])
iteration: 182 generation: def newfun(image): return image.score(['moss', 'lichen', 'lichen-covered twig', 'mossy twig', 'lichen covered wood', 'moss covered wood'])
iteration: 183 generation: def newfun(image): return image.score(['mossy', 'lichen-covered', 'mistletoe-covered', 'moss-covered', 'lichen-grown', 'mistletoe-growing'])
iteration: 184 generation: def newfun(image): return image.score(['lichens on tree branches', 'lichen on tree bole', 'lichen on fallen branches', 'lichen on rocks', 'lichen on ground', 'lichens on fence posts'])
iteration: 185 generation: def newfun(image): return image.score(['chromium oxide', 'iron oxide', 'manganese oxide', 'a reddish-brown pigment', 'a greenish-brown pigment', 'a naturally occurring pigment'])
iteration: 186 generation: def newfun(image): return image.score(['lichen', 'a phyc or myxothallus', 'a bland-looking foliose lichen', 'a crustose areolate lichen', 'a crustose lichen', 'a foliose lichen'])
iteration: 187 generation: def newfun(image): return image.score(['moss', 'lichens', 'mosses', 'bryophytes', 'moss plants', 'mossmen'])
iteration: 188 generation: def newfun(image): return image.score(['a process of erosion', 'a landform', 'a type of rock', 'a naturally occurring object', 'cliffs', 'rock formations'])
iteration: 189 generation: def newfun(image): return image.score(['lichen', 'lichen-covered', 'having lichen on it', 'a forg', 'covered in ferns and moss', 'dripping wet'])
iteration: 190 generation: def newfun(image): return image.score(['lichen covered tree', 'lichen covered trees', 'lichen and moss covered tree', 'lichen and moss covered trees', 'lichen covered forest', 'lichen covered woodland'])
iteration: 191 generation: def newfun(image): return image.score(['lichen covered bark', 'lichen covered tree', 'moss covered bark', 'moss covered tree', 'lichen and moss', 'lichen or moss'])
iteration: 192 generation: def newfun(image): return image.score(['lichen on other lichens', 'lichen on grass', 'lichen on leaves', 'lichen on twigs', 'lichen on bark', 'lichen on rocks'])
iteration: 193 generation: def newfun(image): return image.score(['fairly small leaves', 'leaves with jagged edges', 'leaves that are wavy', 'trees with peeling bark', 'a tree with smoke coming from it', 'a tree with a large trunk'])
iteration: 194 generation: def newfun(image): return image.score(['moss', 'lichen', 'mossy boulder', 'lichen covered boulder', 'moss covered rock', 'lichen-covered terrain'])
iteration: 195 generation: def newfun(image): return image.score(['lichens on rocks', 'lichens on bark', 'lichens on twigs', 'lichens on leaves', 'lichens on grass', 'lichens on other lichens'])
iteration: 196 generation: def newfun(image): return image.score(['peeling lichen', 'cracked bark', 'lichen on wood', 'lichen on tree bark', 'lichen on rocks', 'lichen on soil'])
iteration: 197 generation: def newfun(image): return image.score(['lichen on tree bark', 'lichen on branches', 'lichen on trunks', 'lichen on logs', 'lichen on stumps', 'lichen on fence posts'])
iteration: 198 generation: def newfun(image): return image.score(['lichens on tree branches', 'lichens on shrubs', 'lichens on twigs', 'lichens on bark', 'lichens on leaves', 'lichens on grass'])
iteration: 199 generation: def newfun(image): return image.score(['moss-covered rocks', 'moss-covered logs', 'moss-covered stumps', 'moss-covered trees', 'moss-covered forest', 'an area dominated by moss-covered rocks'])
