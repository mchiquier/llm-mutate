iteration:  0 best program: def newfun(image): return image.score(['long, thin, and curved shape', 'a thick stalk that is attached to the cap at the center', 'a switch or button to turn it on', 'a long, narrow board', 'may have a strap or other fastening device', 'small, round seedpod'])  
iteration:  1 best program: def newfun(image): return image.score(['long, thin, and curved shape', 'a thick stalk that is attached to the cap at the center', 'a switch or button to turn it on', 'a long, narrow board', 'may have a strap or other fastening device', 'small, round seedpod'])  
iteration:  2 best program: def newfun(image): return image.score(['long, thin, and curved shape', 'a thick stalk that is attached to the cap at the center', 'a switch or button to turn it on', 'a long, narrow board', 'may have a strap or other fastening device', 'small, round seedpod'])  
iteration:  3 best program: def newfun(image): return image.score(['long, thin, and curved shape', 'a thick stalk that is attached to the cap at the center', 'a switch or button to turn it on', 'a long, narrow board', 'may have a strap or other fastening device', 'small, round seedpod'])  
iteration:  4 best program: def newfun(image): return image.score(['long, thin, and curved shape', 'a thick stalk that is attached to the cap at the center', 'a switch or button to turn it on', 'a long, narrow board', 'may have a strap or other fastening device', 'small, round seedpod'])  
iteration:  5 best program: def newfun(image): return image.score(['long, thin, and curved shape', 'a thick stalk that is attached to the cap at the center', 'a switch or button to turn it on', 'a long, narrow board', 'may have a strap or other fastening device', 'small, round seedpod'])  
iteration:  6 best program: def newfun(image): return image.score(['long, thin, and curved shape', 'a thick stalk that is attached to the cap at the center', 'a switch or button to turn it on', 'a long, narrow board', 'may have a strap or other fastening device', 'small, round seedpod'])  
iteration:  7 best program: def newfun(image): return image.score(['long, thin, and curved shape', 'a thick stalk that is attached to the cap at the center', 'a switch or button to turn it on', 'a long, narrow board', 'may have a strap or other fastening device', 'small, round seedpod'])  
iteration:  8 best program: def newfun(image): return image.score(['long, thin, and curved shape', 'a thick stalk that is attached to the cap at the center', 'a switch or button to turn it on', 'a long, narrow board', 'may have a strap or other fastening device', 'small, round seedpod'])  
iteration:  9 best program: def newfun(image): return image.score(['long, thin, and curved shape', 'a thick stalk that is attached to the cap at the center', 'a switch or button to turn it on', 'a long, narrow board', 'may have a strap or other fastening device', 'small, round seedpod'])  
iteration:  10 best program: def newfun(image): return image.score(['long, thin, and curved shape', 'a thick stalk that is attached to the cap at the center', 'a switch or button to turn it on', 'a long, narrow board', 'may have a strap or other fastening device', 'small, round seedpod'])  
iteration:  11 best program: def newfun(image): return image.score(['long, thin, and curved shape', 'a thick stalk that is attached to the cap at the center', 'a switch or button to turn it on', 'a long, narrow board', 'may have a strap or other fastening device', 'small, round seedpod'])  
iteration:  12 best program: def newfun(image): return image.score(['long, thin, and curved shape', 'a thick stalk that is attached to the cap at the center', 'a switch or button to turn it on', 'a long, narrow board', 'may have a strap or other fastening device', 'small, round seedpod'])  
iteration:  13 best program: def newfun(image): return image.score(['long, thin, and curved shape', 'a thick stalk that is attached to the cap at the center', 'a switch or button to turn it on', 'a long, narrow board', 'may have a strap or other fastening device', 'small, round seedpod'])  
iteration:  14 best program: def newfun(image): return image.score(['long, thin, and curved shape', 'a thick stalk that is attached to the cap at the center', 'a switch or button to turn it on', 'a long, narrow board', 'may have a strap or other fastening device', 'small, round seedpod'])  
iteration:  15 best program: def newfun(image): return image.score(['long, thin, and curved shape', 'a thick stalk that is attached to the cap at the center', 'a switch or button to turn it on', 'a long, narrow board', 'may have a strap or other fastening device', 'small, round seedpod'])  
iteration:  16 best program: def newfun(image): return image.score(['long, thin, and curved shape', 'a thick stalk that is attached to the cap at the center', 'a switch or button to turn it on', 'a long, narrow board', 'may have a strap or other fastening device', 'small, round seedpod'])  
iteration:  17 best program: def newfun(image): return image.score(['long, thin, and curved shape', 'a thick stalk that is attached to the cap at the center', 'a switch or button to turn it on', 'a long, narrow board', 'may have a strap or other fastening device', 'small, round seedpod'])  
iteration:  18 best program: def newfun(image): return image.score(['long, thin, and curved shape', 'a thick stalk that is attached to the cap at the center', 'a switch or button to turn it on', 'a long, narrow board', 'may have a strap or other fastening device', 'small, round seedpod'])  
iteration:  19 best program: def newfun(image): return image.score(['long, thin, and curved shape', 'a thick stalk that is attached to the cap at the center', 'a switch or button to turn it on', 'a long, narrow board', 'may have a strap or other fastening device', 'small, round seedpod'])  
iteration:  20 best program: def newfun(image): return image.score(['long, thin, and curved shape', 'a thick stalk that is attached to the cap at the center', 'a switch or button to turn it on', 'a long, narrow board', 'may have a strap or other fastening device', 'small, round seedpod'])  
iteration:  21 best program: def newfun(image): return image.score(['long, thin, and curved shape', 'a thick stalk that is attached to the cap at the center', 'a switch or button to turn it on', 'a long, narrow board', 'may have a strap or other fastening device', 'small, round seedpod'])  
iteration:  22 best program: def newfun(image): return image.score(['long, thin, and curved shape', 'a thick stalk that is attached to the cap at the center', 'a switch or button to turn it on', 'a long, narrow board', 'may have a strap or other fastening device', 'small, round seedpod'])  
iteration:  23 best program: def newfun(image): return image.score(['long, thin, and curved shape', 'a thick stalk that is attached to the cap at the center', 'a switch or button to turn it on', 'a long, narrow board', 'may have a strap or other fastening device', 'small, round seedpod'])  
iteration:  24 best program: def newfun(image): return image.score(['long, thin, and curved shape', 'a thick stalk that is attached to the cap at the center', 'a switch or button to turn it on', 'a long, narrow board', 'may have a strap or other fastening device', 'small, round seedpod'])  
iteration:  25 best program: def newfun(image): return image.score(['long, thin, and curved shape', 'a thick stalk that is attached to the cap at the center', 'a switch or button to turn it on', 'a long, narrow board', 'may have a strap or other fastening device', 'small, round seedpod'])  
iteration:  26 best program: def newfun(image): return image.score(['long, thin, and curved shape', 'a thick stalk that is attached to the cap at the center', 'a switch or button to turn it on', 'a long, narrow board', 'may have a strap or other fastening device', 'small, round seedpod'])  
iteration:  27 best program: def newfun(image): return image.score(['long, thin, and curved shape', 'a thick stalk that is attached to the cap at the center', 'a switch or button to turn it on', 'a long, narrow board', 'may have a strap or other fastening device', 'small, round seedpod'])  
iteration:  28 best program: def newfun(image): return image.score(['long, thin, and curved shape', 'a thick stalk that is attached to the cap at the center', 'a switch or button to turn it on', 'a long, narrow board', 'may have a strap or other fastening device', 'small, round seedpod'])  
iteration:  29 best program: def newfun(image): return image.score(['long, thin, and curved shape', 'a thick stalk that is attached to the cap at the center', 'a switch or button to turn it on', 'a long, narrow board', 'may have a strap or other fastening device', 'small, round seedpod'])  
iteration:  30 best program: def newfun(image): return image.score(['long, thin, and curved shape', 'a thick stalk that is attached to the cap at the center', 'a switch or button to turn it on', 'a long, narrow board', 'may have a strap or other fastening device', 'small, round seedpod'])  
iteration:  31 best program: def newfun(image): return image.score(['long, thin, and curved shape', 'a thick stalk that is attached to the cap at the center', 'a switch or button to turn it on', 'a long, narrow board', 'may have a strap or other fastening device', 'small, round seedpod'])  
iteration:  32 best program: def newfun(image): return image.score(['long, thin, and curved shape', 'a thick stalk that is attached to the cap at the center', 'a switch or button to turn it on', 'a long, narrow board', 'may have a strap or other fastening device', 'small, round seedpod'])  
iteration:  33 best program: def newfun(image): return image.score(['long, thin, and curved shape', 'a thick stalk that is attached to the cap at the center', 'a switch or button to turn it on', 'a long, narrow board', 'may have a strap or other fastening device', 'small, round seedpod'])  
iteration:  34 best program: def newfun(image): return image.score(['a thick, fibrous part of a plant', 'has eyelets', 'curved, handle-like part', 'a single line or crease', 'a thick central stem', 'long, thin blades']) 
iteration:  35 best program: def newfun(image): return image.score(['spouts that can be hollow', 'a curved or hooked tip', 'long, thin stems', 'often has pointed or rounded prongs', 'a row of tiny, pear-shaped spots or a row of raised dots', 'a thin, rounded edge']) 
iteration:  36 best program: def newfun(image): return image.score(['spouts that can be hollow', 'a curved or hooked tip', 'long, thin stems', 'often has pointed or rounded prongs', 'a row of tiny, pear-shaped spots or a row of raised dots', 'a thin, rounded edge']) 
iteration:  37 best program: def newfun(image): return image.score(['spouts that can be hollow', 'a curved or hooked tip', 'long, thin stems', 'often has pointed or rounded prongs', 'a row of tiny, pear-shaped spots or a row of raised dots', 'a thin, rounded edge']) 
iteration:  38 best program: def newfun(image): return image.score(['spouts that can be hollow', 'a curved or hooked tip', 'long, thin stems', 'often has pointed or rounded prongs', 'a row of tiny, pear-shaped spots or a row of raised dots', 'a thin, rounded edge']) 
iteration:  39 best program: def newfun(image): return image.score(['spouts that can be hollow', 'a curved or hooked tip', 'long, thin stems', 'often has pointed or rounded prongs', 'a row of tiny, pear-shaped spots or a row of raised dots', 'a thin, rounded edge']) 
iteration:  40 best program: def newfun(image): return image.score(['spouts that can be hollow', 'a curved or hooked tip', 'long, thin stems', 'often has pointed or rounded prongs', 'a row of tiny, pear-shaped spots or a row of raised dots', 'a thin, rounded edge']) 
iteration:  41 best program: def newfun(image): return image.score(['spouts that can be hollow', 'a curved or hooked tip', 'long, thin stems', 'often has pointed or rounded prongs', 'a row of tiny, pear-shaped spots or a row of raised dots', 'a thin, rounded edge']) 
iteration:  42 best program: def newfun(image): return image.score(['spouts that can be hollow', 'a curved or hooked tip', 'long, thin stems', 'often has pointed or rounded prongs', 'a row of tiny, pear-shaped spots or a row of raised dots', 'a thin, rounded edge']) 
iteration:  43 best program: def newfun(image): return image.score(['spouts that can be hollow', 'a curved or hooked tip', 'long, thin stems', 'often has pointed or rounded prongs', 'a row of tiny, pear-shaped spots or a row of raised dots', 'a thin, rounded edge']) 
iteration:  44 best program: def newfun(image): return image.score(['spouts that can be hollow', 'a curved or hooked tip', 'long, thin stems', 'often has pointed or rounded prongs', 'a row of tiny, pear-shaped spots or a row of raised dots', 'a thin, rounded edge']) 
iteration:  45 best program: def newfun(image): return image.score(['spouts that can be hollow', 'a curved or hooked tip', 'long, thin stems', 'often has pointed or rounded prongs', 'a row of tiny, pear-shaped spots or a row of raised dots', 'a thin, rounded edge']) 
iteration:  46 best program: def newfun(image): return image.score(['spouts that can be hollow', 'a curved or hooked tip', 'long, thin stems', 'often has pointed or rounded prongs', 'a row of tiny, pear-shaped spots or a row of raised dots', 'a thin, rounded edge']) 
iteration:  47 best program: def newfun(image): return image.score(['spouts that can be hollow', 'a curved or hooked tip', 'long, thin stems', 'often has pointed or rounded prongs', 'a row of tiny, pear-shaped spots or a row of raised dots', 'a thin, rounded edge']) 
iteration:  48 best program: def newfun(image): return image.score(['spouts that can be hollow', 'a curved or hooked tip', 'long, thin stems', 'often has pointed or rounded prongs', 'a row of tiny, pear-shaped spots or a row of raised dots', 'a thin, rounded edge']) 
iteration:  49 best program: def newfun(image): return image.score(['spouts that can be hollow', 'a curved or hooked tip', 'long, thin stems', 'often has pointed or rounded prongs', 'a row of tiny, pear-shaped spots or a row of raised dots', 'a thin, rounded edge']) 
iteration:  50 best program: def newfun(image): return image.score(['spouts that can be hollow', 'a curved or hooked tip', 'long, thin stems', 'often has pointed or rounded prongs', 'a row of tiny, pear-shaped spots or a row of raised dots', 'a thin, rounded edge']) 
iteration:  51 best program: def newfun(image): return image.score(['spouts that can be hollow', 'a curved or hooked tip', 'long, thin stems', 'often has pointed or rounded prongs', 'a row of tiny, pear-shaped spots or a row of raised dots', 'a thin, rounded edge']) 
iteration:  52 best program: def newfun(image): return image.score(['long, thin, and curved shape', 'holes for threading', 'a brass musical instrument', 'a green stem', 'a spine with the name of the binder', 'small, round seedpod']) 
iteration:  53 best program: def newfun(image): return image.score(['long, thin, and curved shape', 'holes for threading', 'a brass musical instrument', 'a green stem', 'a spine with the name of the binder', 'small, round seedpod']) 
iteration:  54 best program: def newfun(image): return image.score(['long, thin, and curved shape', 'holes for threading', 'a brass musical instrument', 'a green stem', 'a spine with the name of the binder', 'small, round seedpod']) 
iteration:  55 best program: def newfun(image): return image.score(['long, thin, and curved shape', 'holes for threading', 'a brass musical instrument', 'a green stem', 'a spine with the name of the binder', 'small, round seedpod']) 
iteration:  56 best program: def newfun(image): return image.score(['small, round seeds']) 
iteration:  57 best program: def newfun(image): return image.score(['long, thin shoots']) 
iteration:  58 best program: def newfun(image): return image.score(['long, thin shoots']) 
iteration:  59 best program: def newfun(image): return image.score(['long, thin shoots']) 
iteration:  60 best program: def newfun(image): return image.score(['long, thin shoots']) 
iteration:  61 best program: def newfun(image): return image.score(['long, thin shoots']) 
iteration:  62 best program: def newfun(image): return image.score(['long, thin shoots']) 
iteration:  63 best program: def newfun(image): return image.score(['long, thin shoots']) 
iteration:  64 best program: def newfun(image): return image.score(['long, thin shoots']) 
iteration:  65 best program: def newfun(image): return image.score(['long, thin shoots']) 
iteration:  66 best program: def newfun(image): return image.score(['long, thin shoots']) 
iteration:  67 best program: def newfun(image): return image.score(['long, thin shoots']) 
iteration:  68 best program: def newfun(image): return image.score(['long, thin shoots']) 
iteration:  69 best program: def newfun(image): return image.score(['long, thin shoots']) 
iteration:  70 best program: def newfun(image): return image.score(['long, thin shoots']) 
iteration:  71 best program: def newfun(image): return image.score(['long, thin shoots']) 
iteration:  72 best program: def newfun(image): return image.score(['long, thin shoots']) 
iteration:  73 best program: def newfun(image): return image.score(['long, thin shoots']) 
iteration:  74 best program: def newfun(image): return image.score(['long, thin shoots']) 
iteration:  75 best program: def newfun(image): return image.score(['long, thin shoots']) 
iteration:  76 best program: def newfun(image): return image.score(['long, thin shoots']) 
iteration:  77 best program: def newfun(image): return image.score(['long, thin shoots']) 
iteration:  78 best program: def newfun(image): return image.score(['long, thin shoots']) 
iteration:  79 best program: def newfun(image): return image.score(['long, thin shoots']) 
iteration:  80 best program: def newfun(image): return image.score(['long, thin shoots']) 
iteration:  81 best program: def newfun(image): return image.score(['long, thin shoots']) 
iteration:  82 best program: def newfun(image): return image.score(['long, thin shoots']) 
iteration:  83 best program: def newfun(image): return image.score(['long, thin shoots']) 
iteration:  84 best program: def newfun(image): return image.score(['long, thin shoots']) 
iteration:  85 best program: def newfun(image): return image.score(['long, thin shoots']) 
iteration:  86 best program: def newfun(image): return image.score(['long, thin shoots']) 
iteration:  87 best program: def newfun(image): return image.score(['long, thin shoots']) 
iteration:  88 best program: def newfun(image): return image.score(['long, thin shoots']) 
iteration:  89 best program: def newfun(image): return image.score(['long, thin shoots']) 
iteration:  90 best program: def newfun(image): return image.score(['long, thin shoots']) 
iteration:  91 best program: def newfun(image): return image.score(['long, thin shoots']) 
iteration:  92 best program: def newfun(image): return image.score(['long, thin shoots']) 
iteration:  93 best program: def newfun(image): return image.score([' long, thin stems']) 
iteration:  94 best program: def newfun(image): return image.score([' long, thin stems']) 
iteration:  95 best program: def newfun(image): return image.score([' long, thin stems']) 
iteration:  96 best program: def newfun(image): return image.score([' long, thin stems']) 
iteration:  97 best program: def newfun(image): return image.score(['a group of wheat stalks formed into a sheaf']) 
iteration:  98 best program: def newfun(image): return image.score(['a group of wheat stalks formed into a sheaf']) 
iteration:  99 best program: def newfun(image): return image.score(['a group of wheat stalks formed into a sheaf']) 
iteration:  100 best program: def newfun(image): return image.score(['a group of wheat stalks formed into a sheaf']) 
iteration:  101 best program: def newfun(image): return image.score(['a group of wheat stalks formed into a sheaf']) 
iteration:  102 best program: def newfun(image): return image.score(['a group of wheat stalks formed into a sheaf']) 
iteration:  103 best program: def newfun(image): return image.score(['a group of wheat stalks formed into a sheaf']) 
iteration:  104 best program: def newfun(image): return image.score(['a group of wheat stalks formed into a sheaf']) 
iteration:  105 best program: def newfun(image): return image.score(['a group of wheat stalks formed into a sheaf']) 
iteration:  106 best program: def newfun(image): return image.score(['a group of wheat stalks formed into a sheaf']) 
iteration:  107 best program: def newfun(image): return image.score(['a group of wheat stalks formed into a sheaf']) 
iteration:  108 best program: def newfun(image): return image.score(['a group of wheat stalks formed into a sheaf']) 
iteration:  109 best program: def newfun(image): return image.score(['a group of wheat stalks formed into a sheaf']) 
iteration:  110 best program: def newfun(image): return image.score(['a group of wheat stalks formed into a sheaf']) 
iteration:  111 best program: def newfun(image): return image.score(['a group of wheat stalks formed into a sheaf']) 
iteration:  112 best program: def newfun(image): return image.score(['a group of wheat stalks formed into a sheaf']) 
iteration:  113 best program: def newfun(image): return image.score(['a group of wheat stalks formed into a sheaf']) 
iteration:  114 best program: def newfun(image): return image.score(['a group of wheat stalks formed into a sheaf']) 
iteration:  115 best program: def newfun(image): return image.score(['a group of wheat stalks formed into a sheaf']) 
iteration:  116 best program: def newfun(image): return image.score(['a group of wheat stalks formed into a sheaf']) 
iteration:  117 best program: def newfun(image): return image.score(['a group of wheat stalks formed into a sheaf']) 
iteration:  118 best program: def newfun(image): return image.score(['a group of wheat stalks formed into a sheaf']) 
iteration:  119 best program: def newfun(image): return image.score(['a group of wheat stalks formed into a sheaf']) 
iteration:  120 best program: def newfun(image): return image.score(['a group of wheat stalks formed into a sheaf']) 
iteration:  121 best program: def newfun(image): return image.score(['a group of wheat stalks formed into a sheaf']) 
iteration:  122 best program: def newfun(image): return image.score(['a group of wheat stalks formed into a sheaf']) 
iteration:  123 best program: def newfun(image): return image.score(['a group of wheat stalks formed into a sheaf']) 
iteration:  124 best program: def newfun(image): return image.score(['a group of wheat stalks formed into a sheaf']) 
iteration:  125 best program: def newfun(image): return image.score(['a group of wheat stalks formed into a sheaf']) 
iteration:  126 best program: def newfun(image): return image.score(['a group of wheat stalks formed into a sheaf']) 
iteration:  127 best program: def newfun(image): return image.score(['a group of wheat stalks formed into a sheaf']) 
iteration:  128 best program: def newfun(image): return image.score(['a group of wheat stalks formed into a sheaf']) 
iteration:  129 best program: def newfun(image): return image.score(['a group of wheat stalks formed into a sheaf']) 
iteration:  130 best program: def newfun(image): return image.score(['a group of wheat stalks formed into a sheaf']) 
iteration:  131 best program: def newfun(image): return image.score(['a group of wheat stalks formed into a sheaf']) 
iteration:  132 best program: def newfun(image): return image.score(['a group of wheat stalks formed into a sheaf']) 
iteration:  133 best program: def newfun(image): return image.score(['a group of wheat stalks formed into a sheaf']) 
iteration:  134 best program: def newfun(image): return image.score(['a group of wheat stalks formed into a sheaf']) 
iteration:  135 best program: def newfun(image): return image.score(['a group of wheat stalks formed into a sheaf']) 
iteration:  136 best program: def newfun(image): return image.score(['a group of wheat stalks formed into a sheaf']) 
iteration:  137 best program: def newfun(image): return image.score(['a group of wheat stalks formed into a sheaf']) 
iteration:  138 best program: def newfun(image): return image.score(['a group of wheat stalks formed into a sheaf']) 
iteration:  139 best program: def newfun(image): return image.score(['a group of wheat stalks formed into a sheaf']) 
iteration:  140 best program: def newfun(image): return image.score(['a group of wheat stalks formed into a sheaf']) 
iteration:  141 best program: def newfun(image): return image.score(['a group of wheat stalks formed into a sheaf']) 
iteration:  142 best program: def newfun(image): return image.score(['a group of wheat stalks formed into a sheaf']) 
iteration:  143 best program: def newfun(image): return image.score(['a group of wheat stalks formed into a sheaf']) 
iteration:  144 best program: def newfun(image): return image.score(['a group of wheat stalks formed into a sheaf']) 
iteration:  145 best program: def newfun(image): return image.score(['a group of wheat stalks formed into a sheaf']) 
iteration:  146 best program: def newfun(image): return image.score(['a group of wheat stalks formed into a sheaf']) 
iteration:  147 best program: def newfun(image): return image.score(['a group of wheat stalks formed into a sheaf']) 
iteration:  148 best program: def newfun(image): return image.score(['a group of wheat stalks formed into a sheaf']) 
iteration:  149 best program: def newfun(image): return image.score(['a group of wheat stalks formed into a sheaf']) 
iteration:  150 best program: def newfun(image): return image.score(['a group of wheat stalks formed into a sheaf']) 
iteration:  151 best program: def newfun(image): return image.score(['a group of wheat stalks formed into a sheaf']) 
iteration:  152 best program: def newfun(image): return image.score(['a group of wheat stalks formed into a sheaf']) 
iteration:  153 best program: def newfun(image): return image.score(['a group of wheat stalks formed into a sheaf']) 
iteration:  154 best program: def newfun(image): return image.score(['a group of wheat stalks formed into a sheaf']) 
iteration:  155 best program: def newfun(image): return image.score(['a group of wheat stalks formed into a sheaf']) 
iteration:  156 best program: def newfun(image): return image.score(['a group of wheat stalks formed into a sheaf']) 
iteration:  157 best program: def newfun(image): return image.score(['a group of wheat stalks formed into a sheaf']) 
iteration:  158 best program: def newfun(image): return image.score(['a group of wheat stalks formed into a sheaf']) 
iteration:  159 best program: def newfun(image): return image.score(['a group of wheat stalks formed into a sheaf']) 
iteration:  160 best program: def newfun(image): return image.score(['a group of wheat stalks formed into a sheaf']) 
iteration:  161 best program: def newfun(image): return image.score(['a group of wheat stalks formed into a sheaf']) 
iteration:  162 best program: def newfun(image): return image.score(['a group of wheat stalks formed into a sheaf']) 
iteration:  163 best program: def newfun(image): return image.score(['a group of wheat stalks formed into a sheaf']) 
iteration:  164 best program: def newfun(image): return image.score(['long blades of grass']) 
iteration:  165 best program: def newfun(image): return image.score(['long blades of grass']) 
iteration:  166 best program: def newfun(image): return image.score(['long blades of grass']) 
iteration:  167 best program: def newfun(image): return image.score(['long blades of grass']) 
iteration:  168 best program: def newfun(image): return image.score(['long blades of grass']) 
iteration:  169 best program: def newfun(image): return image.score(['long blades of grass']) 
iteration:  170 best program: def newfun(image): return image.score(['long blades of grass']) 
iteration:  171 best program: def newfun(image): return image.score(['long blades of grass']) 
iteration:  172 best program: def newfun(image): return image.score(['long blades of grass']) 
iteration:  173 best program: def newfun(image): return image.score(['long blades of grass']) 
iteration:  174 best program: def newfun(image): return image.score(['long blades of grass']) 
iteration:  175 best program: def newfun(image): return image.score(['long blades of grass']) 
iteration:  176 best program: def newfun(image): return image.score(['long blades of grass']) 
iteration:  177 best program: def newfun(image): return image.score(['long blades of grass']) 
iteration:  178 best program: def newfun(image): return image.score(['long blades of grass']) 
iteration:  179 best program: def newfun(image): return image.score(['long blades of grass']) 
iteration:  180 best program: def newfun(image): return image.score(['long blades of grass']) 
iteration:  181 best program: def newfun(image): return image.score(['long blades of grass']) 
iteration:  182 best program: def newfun(image): return image.score(['long blades of grass']) 
iteration:  183 best program: def newfun(image): return image.score(['long blades of grass']) 
iteration:  184 best program: def newfun(image): return image.score(['long blades of grass']) 
iteration:  185 best program: def newfun(image): return image.score(['long blades of grass']) 
iteration:  186 best program: def newfun(image): return image.score(['long blades of grass']) 
iteration:  187 best program: def newfun(image): return image.score(['long blades of grass']) 
iteration:  188 best program: def newfun(image): return image.score(['long blades of grass']) 
iteration:  189 best program: def newfun(image): return image.score(['long blades of grass']) 
iteration:  190 best program: def newfun(image): return image.score(['long blades of grass']) 
iteration:  191 best program: def newfun(image): return image.score(['long blades of grass']) 
iteration:  192 best program: def newfun(image): return image.score(['long blades of grass']) 
iteration:  193 best program: def newfun(image): return image.score(['long blades of grass']) 
iteration:  194 best program: def newfun(image): return image.score(['long blades of grass']) 
iteration:  195 best program: def newfun(image): return image.score(['long blades of grass']) 
iteration:  196 best program: def newfun(image): return image.score(['long blades of grass']) 
iteration:  197 best program: def newfun(image): return image.score(['long blades of grass']) 
iteration:  198 best program: def newfun(image): return image.score(['long blades of grass']) 
iteration:  199 best program: def newfun(image): return image.score(['long blades of grass']) 
iteration:  200 best program: def newfun(image): return image.score(['a field of wheat or other grains']) 
iteration:  201 best program: def newfun(image): return image.score(['a field of wheat or other grains']) 
iteration:  202 best program: def newfun(image): return image.score(['a field of wheat or other grains']) 
iteration:  203 best program: def newfun(image): return image.score(['grass-like leaves']) 
iteration:  204 best program: def newfun(image): return image.score(['grass-like leaves']) 
iteration:  205 best program: def newfun(image): return image.score(['grass-like leaves']) 
iteration:  206 best program: def newfun(image): return image.score(['grass-like leaves']) 
iteration:  207 best program: def newfun(image): return image.score(['grass-like leaves']) 
iteration:  208 best program: def newfun(image): return image.score(['grass-like leaves']) 
iteration:  209 best program: def newfun(image): return image.score(['grass-like leaves']) 
iteration:  210 best program: def newfun(image): return image.score(['grass-like leaves']) 
iteration:  211 best program: def newfun(image): return image.score(['grass-like leaves']) 
iteration:  212 best program: def newfun(image): return image.score(['grass-like leaves']) 
iteration:  213 best program: def newfun(image): return image.score(['grass-like leaves']) 
iteration:  214 best program: def newfun(image): return image.score(['grass-like leaves']) 
iteration:  215 best program: def newfun(image): return image.score(['grass-like leaves']) 
iteration:  216 best program: def newfun(image): return image.score(['grass-like leaves']) 
iteration:  217 best program: def newfun(image): return image.score(['grass-like leaves']) 
iteration:  218 best program: def newfun(image): return image.score(['grass-like leaves']) 
iteration:  219 best program: def newfun(image): return image.score(['grass-like leaves']) 
iteration:  220 best program: def newfun(image): return image.score(['grass-like leaves']) 
iteration:  221 best program: def newfun(image): return image.score(['grass-like leaves']) 
iteration:  222 best program: def newfun(image): return image.score(['grass-like leaves']) 
iteration:  223 best program: def newfun(image): return image.score(['grass-like leaves']) 
iteration:  224 best program: def newfun(image): return image.score(['light-colored cultivated grasses']) 
iteration:  225 best program: def newfun(image): return image.score(['light-colored cultivated grasses']) 
iteration:  226 best program: def newfun(image): return image.score(['light-colored cultivated grasses']) 
iteration:  227 best program: def newfun(image): return image.score(['light-colored cultivated grasses']) 
iteration:  228 best program: def newfun(image): return image.score(['light-colored cultivated grasses']) 
iteration:  229 best program: def newfun(image): return image.score(['light-colored cultivated grasses']) 
iteration:  230 best program: def newfun(image): return image.score(['light-colored cultivated grasses']) 
iteration:  231 best program: def newfun(image): return image.score(['rows of wheat plants']) 
iteration:  232 best program: def newfun(image): return image.score(['rows of wheat plants']) 
iteration:  233 best program: def newfun(image): return image.score(['rows of wheat plants']) 
iteration:  234 best program: def newfun(image): return image.score(['rows of wheat plants']) 
iteration:  235 best program: def newfun(image): return image.score(['rows of wheat plants']) 
iteration:  236 best program: def newfun(image): return image.score(['rows of wheat plants']) 
iteration:  237 best program: def newfun(image): return image.score(['rows of wheat plants']) 
iteration:  238 best program: def newfun(image): return image.score(['rows of wheat plants']) 
iteration:  239 best program: def newfun(image): return image.score(['rows of wheat plants']) 
iteration:  240 best program: def newfun(image): return image.score(['rows of wheat plants']) 
iteration:  241 best program: def newfun(image): return image.score(['rows of wheat plants']) 
iteration:  242 best program: def newfun(image): return image.score(['rows of wheat plants']) 
iteration:  243 best program: def newfun(image): return image.score(['rows of wheat plants']) 
iteration:  244 best program: def newfun(image): return image.score(['rows of wheat plants']) 
iteration:  245 best program: def newfun(image): return image.score(['rows of wheat plants']) 
iteration:  246 best program: def newfun(image): return image.score(['rows of wheat plants']) 
iteration:  247 best program: def newfun(image): return image.score(['rows of wheat plants']) 
iteration:  248 best program: def newfun(image): return image.score(['rows of wheat plants']) 
iteration:  249 best program: def newfun(image): return image.score(['rows of wheat plants']) 
