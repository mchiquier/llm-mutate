iteration: 0 generation: def newfun(image): return image.score(['square or rectangular in shape', 'a circular opening in the center', 'སVrimped edges', ' kantha or trims', 'вичrolled on a cylinder', ' semprever' ])
iteration: 1 generation: def newfun(image): return image.score(['twin arrows pointing out of the ground', 'made from silver, tin, copper, or a combination of these metals', 'chiefly herbaceous plant stalks', 'has an expiration date', 'rotating circular platform', 'smooth, shining surface'])
iteration: 2 generation: def newfun(image): return image.score(['persimmon', 'oak', 'wintergreen', 'hay', 'birch', 'sedge'])
iteration: 3 generation: def newfun(image): return image.score(['long, thin leaves', 'pointed snout', 'spiny or bristly skin', 'redського {} head', 'based on a special formula', 'wound around a spool'])
iteration: 4 generation: def newfun(image): return image.score(['birch', 'reeds', 'sandpaper', 'puffed rice', 'pussy willow', 'sweet gum'])
iteration: 5 generation: def newfun(image): return image.score(['dandelion', 'crabgrass', 'fescue', 'hay wimper', 'bromegrass', 'quackgrass'])
iteration: 6 generation: def newfun(image): return image.score(['hair that is always styled in braids or dreadlocks', 'can be single- or double-stranded', 'typically made from cotton, wool, or synthetic materials', 'may have tassels or other decorative features on the ends', 'may be worn with a matching shawl or scarf', 'often embroidered with complex patterns'])
iteration: 7 generation: def newfun(image): return image.score(['dandelion', 'chickweed', 'plantain', 'chicory', 'blue-violet', 'horsetails'])
iteration: 8 generation: def newfun(image): return image.score([ 'any of various trees and shrubs',    'small reddish fruits',    'erect, long-stalked pinnacles',     'ornamental evergreen shrub with red berries',    'evergreen tree with edible tiny winged nuts',    'persistent shield-like leaves'])
iteration: 9 generation: def newfun(image): return image.score([ 'perennial grass with broad blunt leaves',    'round clusters of tiny white flowers',    'small, green leaves', 'grayish-brown, large ending in single pale yellow flower', 'green or yellow', 'containing perennial plants'])
iteration: 10 generation: def newfun(image): return image.score(['algae', 'blades of grass', 'a rolling pin', 'chives', 'corn silk', 'quinoa'])
iteration: 11 generation: def newfun(image): return image.score(['six sharp points', 'made of twigs, leaves, or straw', 'three lobes', 'has bumps or buttons', 'a musical instrument', 'walks on four small wheels'])
iteration: 12 generation: def newfun(image): return image.score(['perennial grass with broad blunt leaves', 'round clusters of tiny white flowers', 'small, green leaves', 'grayish-brown, large ending in single pale yellow flower', 'green or yellow', 'containing perennial plants'])
iteration: 13 generation: def newfun(image): return image.score(['small, hard seeds', 'oval, orange- yellow fruit', 'hanging filaments', 'a curved, metal blade', 'rolls back and forth', 'long, thin neck'])
iteration: 14 generation: def newfun(image): return image.score(['a short, crooked stem', 'woolly leaves', 'at the end of a staff', 'tight clusters of tiny flowers', 'green with short, thick leaves', 'doctor or physician'])
iteration: 15 generation: def newfun(image): return image.score(['dandelion', 'crabgrass', 'fescue', 'hay wimper', 'bromegrass', 'quackgrass'])
iteration: 16 generation: def newfun(image): return image.score(['dandelion', 'crabgrass', 'fescue', 'hay wimper', 'bromegrass', 'quackgrass'])
iteration: 17 generation: def newfun(image): return image.score(['smooth, shining surface', 'chiefly herbaceous plant stalks', 'long, thin neck', 'twin arrows pointing out of the ground', 'small, hard seeds', 'oval, orange- yellow fruit'])
iteration: 18 generation: def newfun(image): return image.score(['upright, single stem', 'hardy, lawn-like ground cover', 'compound, coarsely-toothed leaves', 'top-dressing or fertilizer', 'iron shoes', 'long-handled Quill'])
iteration: 19 generation: def newfun(image): return image.score(['elongated seed of grass', 'ground orchid', 'eel-grass', 'otter', 'otter-grass', 'bunch grass'])
iteration: 20 generation: def newfun(image): return image.score(['upright, single stem', 'hardy, lawn-like ground cover', 'compound, coarsely-toothed leaves', 'top-dressing or fertilizer', 'iron shoes', 'long-handled Quill'])
iteration: 21 generation: def newfun(image): return image.score(['a tall, vertical shape', 'may have tassels, fringe, or cording', ' Najing or Night Blooming Cereus', 'person wearing clothing', 'typically made of rubber, vinyl, or plastic', 'gray or gray-blue in color'])
iteration: 22 generation: def newfun(image): return image.score(['perennial grass with broad blunt leaves', 'round clusters of tiny white flowers', 'small, green leaves', 'grayish-brown, large ending in single pale yellow flower', 'green or yellow', 'containing perennial plants'])
iteration: 23 generation: def newfun(image): return image.score(['small evergreen shrub',    'oval leaves',    'oleaginous seeds',     'bluish-purple flowers',     'hardy perennial herb',     'believed to be a cure-all'])
iteration: 24 generation: def newfun(image): return image.score(['long, thin leaves'])
iteration: 25 generation: def newfun(image): return image.score(['a petiole', 'leaf structure', 'flower color', 'compound ovate leaves', 'legendary recreational vehicle', 'develops from prominent globular Spring flower-heads'])
iteration: 26 generation: def newfun(image): return image.score(['a Mass image', 'perennial plants', 'yellow flowers', ' spreading branches', 'green leaves', 'hairy stems'])
iteration: 27 generation: def newfun(image): return image.score(['dandelion seed head', 'crabgrass seed head', 'fescue seed head', 'hay wimper seed head', 'bromegrass seed head', 'quackgrass seed head'])
iteration: 28 generation: def newfun(image): return image.score(['long, coarse grass', 'straggling, often noxious weeds', 'flowers have five or six petals', 'persistent calyx', 'oval or ovoid', 'lateral branches'])
iteration: 29 generation: def newfun(image): return image.score(['stamens crowded around an egg-shaped ovary'])
iteration: 30 generation: def newfun(image): return image.score(['snake-like stems and leaves'])
iteration: 31 generation: def newfun(image): return image.score(['widespread, grass-like, herbaceous plants', 'edible seeds or grains', 'forms Vasular tissue', 'also class shrubs', 'modified leaves (spines)', 'bulbous base'])
iteration: 32 generation: def newfun(image): return image.score(['spring onion', 'garlic', 'radish', 'chive', 'pOtherPrograms', 'leek'])
iteration: 33 generation: def newfun(image): return image.score(['a long, thin shape', 'a branch or tree', 'delicate tendrils or "spaghetti"',    'tall spikes of colorful blooms',    'a vine',    'heart-shaped leaves'])
iteration: 34 generation: def newfun(image): return image.score(['quackgrass', 'crabgrass', 'fescue', 'hay wimper', 'bromegrass'])
iteration: 35 generation: def newfun(image): return image.score(['a green stem and red flowers'])
iteration: 36 generation: def newfun(image): return image.score(['many hairy stamens', 'lobed leaves'])
iteration: 37 generation: def newfun(image): return image.score(['stinging hairs on stems and leaves'])
iteration: 38 generation: def newfun(image): return image.score(['annual grasses with flat florets', 'bulrush', 'cattails', 'grazing grasses', ' Indiangrass', 'switchgrass'])
iteration: 39 generation: def newfun(image): return image.score(['brome grasses'])
iteration: 40 generation: def newfun(image): return image.score(['bunchgrass', 'ricegrass', 'sessile oat', 'orchard grass', 'quackgrass', 'woolgrass'])
iteration: 41 generation: def newfun(image): return image.score(['bentgrass', 'paspalum', 'seashore paspalum', 'bahiagrass', 'goosegrass', 'centipede grass'])
iteration: 42 generation: def newfun(image): return image.score(['annual grassy plant'])
iteration: 43 generation: def newfun(image): return image.score(['dandelion', 'crabgrass', 'fescue', 'hay wimper', 'bromegrass', 'quackgrass'])
iteration: 44 generation: def newfun(image): return image.score(['leaves crowded around a stem'])
iteration: 45 generation: def newfun(image): return image.score(['dandelion', 'horsetails', 'chickweed', 'plantain', 'chicory'])
iteration: 46 generation: def newfun(image): return image.score(['foxtail grasses'])
iteration: 47 generation: def newfun(image): return image.score(['switchgrass', 'bromegrass', 'orchard grass', 'quackgrass', ' Kentucky bluegrass'])
iteration: 48 generation: def newfun(image): return image.score(['grasses with spikelets'])
iteration: 49 generation: def newfun(image): return image.score(['goose grass', 'Canada wild rye', 'big bluestem', 'Indian grass', 'little bluestem', ' switchgrass'])
iteration: 50 generation: def newfun(image): return image.score(['witchgrass', 'hops', 'a spiked ball', 'whisk broom', 'basswood', 'sumac'])
iteration: 51 generation: def newfun(image): return image.score(['Eragrostis'])
iteration: 52 generation: def newfun(image): return image.score(['a cluster of stiff hairs on a plant'])
iteration: 53 generation: def newfun(image): return image.score(['ragweed'])
iteration: 54 generation: def newfun(image): return image.score(['grasses with broad blunt leaves'])
iteration: 55 generation: def newfun(image): return image.score(['warm-season grasses'])
iteration: 56 generation: def newfun(image): return image.score([' bearing flowers on short stalks'])
iteration: 57 generation: def newfun(image): return image.score(['tall fescue', 'perennial ryegrass', 'Kentucky bluegrass', 'tall oatgrass', 'R version of annual ryegrass', ' dallisgrass'])
iteration: 58 generation: def newfun(image): return image.score(['annual ryegrass', 'tall fescue', 'perennial ryegrass', 'Kentucky bluegrass', ' dallisgrass'])
iteration: 59 generation: def newfun(image): return image.score(['big bluestem', 'little bluestem', 'indian grass', 'prairie brome', 'west Castroville bluestem'])
iteration: 60 generation: def newfun(image): return image.score(['meadow foxtail', 'meadow bromegrass', ' orchard grass', 'timothy grass', "hare's-tail grass"])
iteration: 61 generation: def newfun(image): return image.score(['grasses with tassels (flowering tops)'])
iteration: 62 generation: def newfun(image): return image.score(['a species of Bromus grass'])
iteration: 63 generation: def newfun(image): return image.score(['grasses with tassels (flowering tops)'])
iteration: 64 generation: def newfun(image): return image.score(['a species of Agrostis grass'])
iteration: 65 generation: def newfun(image): return image.score(['grasses with rectangular stems'])
iteration: 66 generation: def newfun(image): return image.score(['grasses with broad blunt leaves'])
iteration: 67 generation: def newfun(image): return image.score(['Short Lived perennial with tube-like pastel green flowers'])
iteration: 68 generation: def newfun(image): return image.score(['crabgrass', 'rye', 'bristlegrass', 'gleaning grass', 'tickseed grass', 'climbing grass'])
iteration: 69 generation: def newfun(image): return image.score(['oval leaves', 'ligulate flowers'])
iteration: 70 generation: def newfun(image): return image.score(['brome grasses'])
iteration: 71 generation: def newfun(image): return image.score(['bunch-type grasses'])
iteration: 72 generation: def newfun(image): return image.score(['grasses with rhizomes'])
iteration: 73 generation: def newfun(image): return image.score(['panicle-type grasses'])
iteration: 74 generation: def newfun(image): return image.score(['an inflorescence with spikelets'])
iteration: 75 generation: def newfun(image): return image.score(['flowering heads borne on stalks'])
iteration: 76 generation: def newfun(image): return image.score(['bunchgrass', 'orchardgrass', 'quaking grass', 'switchgrass', 'Indian grass'])
iteration: 77 generation: def newfun(image): return image.score(['grasses with narrow sharp-tipped leaves'])
iteration: 78 generation: def newfun(image): return image.score(['bunchgrass', 'orchardgrass', 'quaking grass', 'switchgrass', 'Indian grass'])
iteration: 79 generation: def newfun(image): return image.score(['perennial grasses'])
iteration: 80 generation: def newfun(image): return image.score(['grasses with bulbs'])
iteration: 81 generation: def newfun(image): return image.score([' Agrostis pallens'])
iteration: 82 generation: def newfun(image): return image.score(['crabgrass flowers', 'dandelion flowers', 'fescue flowers', 'hay wimper flowers', 'bromegrass flowers', 'quackgrass flowers'])
iteration: 83 generation: def newfun(image): return image.score(['grasses with rhizomes'])
iteration: 84 generation: def newfun(image): return image.score(['smooth brome grass', 'Weeping Lovegrass'])
iteration: 85 generation: def newfun(image): return image.score(['spikelets'])
iteration: 86 generation: def newfun(image): return image.score(['ryegrass flowers', 'bermudagrass flowers', 'kentucky bluegrass flowers', 'tall fescue flowers', 'perennial ryegrass flowers', 'smooth-stalked meadow grass flowers'])
iteration: 87 generation: def newfun(image): return image.score(['bunch type grasses'])
iteration: 88 generation: def newfun(image): return image.score(['incanna', 'jointed goat grass', 'common couch grass', 'ryegrass', ' Kentucky bluegrass', 'orchard grass'])
iteration: 89 generation: def newfun(image): return image.score(['grasses with creeping stems'])
iteration: 90 generation: def newfun(image): return image.score(['smooth bromyard grass'])
iteration: 91 generation: def newfun(image): return image.score(['grasses with sharp-pointed leaves'])
iteration: 92 generation: def newfun(image): return image.score(['grasses with large showy flowers'])
iteration: 93 generation: def newfun(image): return image.score(['grasses of genus Agrostis'])
iteration: 94 generation: def newfun(image): return image.score(['grasses with broad blunt-tipped leaves'])
iteration: 95 generation: def newfun(image): return image.score(['grasses with much-branched stems'])
iteration: 96 generation: def newfun(image): return image.score(['grasses with large showy flowers'])
iteration: 97 generation: def newfun(image): return image.score(['grasses with spikelets'])
iteration: 98 generation: def newfun(image): return image.score(['perennial grass with slender leaves'])
iteration: 99 generation: def newfun(image): return image.score(['rye spikelets', 'wheat spikelets', 'oat spikelets', 'barley spikelets', 'rice spikelets'])
iteration: 100 generation: def newfun(image): return image.score(['a genus of Agrostis grass'])
iteration: 101 generation: def newfun(image): return image.score(['Agrostis vulgaris'])
iteration: 102 generation: def newfun(image): return image.score(['a tall perennial grass'])
iteration: 103 generation: def newfun(image): return image.score(['grasses with greenish flowers'])
iteration: 104 generation: def newfun(image): return image.score(['grasses with flat clusters of spikelets'])
iteration: 105 generation: def newfun(image): return image.score(['grasses with broad leaves'])
iteration: 106 generation: def newfun(image): return image.score(['grasses with spikelets arranged in groups or clusters'])
iteration: 107 generation: def newfun(image): return image.score(['grasses with spikelets arranged in One Rectangular Row'])
iteration: 108 generation: def newfun(image): return image.score(['grasses with spikelets arranged in Two Rows'])
iteration: 109 generation: def newfun(image): return image.score(['ryegrass flowers'])
iteration: 110 generation: def newfun(image): return image.score(['grasses with numerous narrow leaves'])
iteration: 111 generation: def newfun(image): return image.score(['spikelets of grasses'])
iteration: 112 generation: def newfun(image): return image.score(['grasses with tall flower stalks'])
iteration: 113 generation: def newfun(image): return image.score(['grasses with needle-like leaves'])
iteration: 114 generation: def newfun(image): return image.score(['bunch type grasses with greenish flowers'])
iteration: 115 generation: def newfun(image): return image.score(['grasses with several small flowers'])
iteration: 116 generation: def newfun(image): return image.score(['grasses with spikelets arranged along the sides of the inflorescence'])
iteration: 117 generation: def newfun(image): return image.score(['grasses with broad blunt leaves'])
iteration: 118 generation: def newfun(image): return image.score(['grasses with small flowers'])
iteration: 119 generation: def newfun(image): return image.score(['grasses with large showy inflorescence'])
iteration: 120 generation: def newfun(image): return image.score(['grasses with spikelets'])
iteration: 121 generation: def newfun(image): return image.score(['grasses with spikelets arranged alternately along the stem'])
iteration: 122 generation: def newfun(image): return image.score(['grasses with spikelets arranged in pairs along the stem'])
iteration: 123 generation: def newfun(image): return image.score(['grasses with spikelets arranged in clusters along the stem'])
iteration: 124 generation: def newfun(image): return image.score(['grasses with spikelets arranged in Two Rows'])
iteration: 125 generation: def newfun(image): return image.score(['grasses with narrow needle-like leaves'])
iteration: 126 generation: def newfun(image): return image.score(['grasses with spikelets arranged in pairs along the inflorescence'])
iteration: 127 generation: def newfun(image): return image.score(['brome', 'ryegrass', 'fescue', 'timothy', 'bents', 'orchard grass'])
iteration: 128 generation: def newfun(image): return image.score(['grasses with spikelets arranged in clusters along the stem'])
iteration: 129 generation: def newfun(image): return image.score(['grasses with spikelets borne singly at intervals along an open inflorescence'])
iteration: 130 generation: def newfun(image): return image.score(['grasses with spikelets arranged in a spike-like inflorescence'])
iteration: 131 generation: def newfun(image): return image.score(['panicled grasses'])
iteration: 132 generation: def newfun(image): return image.score(['grasses with drooping flower stalks'])
iteration: 133 generation: def newfun(image): return image.score(['grasses with long flower stalks'])
iteration: 134 generation: def newfun(image): return image.score(['grasses with spikelets arranged alternate along the inflorescence'])
iteration: 135 generation: def newfun(image): return image.score(['grasses with many-flowered spikelets'])
iteration: 136 generation: def newfun(image): return image.score(['grasses with dense clusters of spikelets'])
iteration: 137 generation: def newfun(image): return image.score(['grasses with spikelets arranged in Two Rows'])
iteration: 138 generation: def newfun(image): return image.score(['grasses with spikelets borne paired (or occasionally singly) at nodes of a densely flowered spike'])
iteration: 139 generation: def newfun(image): return image.score(['grasses with finger-like spikelets'])
iteration: 140 generation: def newfun(image): return image.score(['grasses with loose clusters of spikelets'])
iteration: 141 generation: def newfun(image): return image.score(['grasses with spikelets'])
iteration: 142 generation: def newfun(image): return image.score(['grasses with spikelets arranged along different parts of the stem'])
iteration: 143 generation: def newfun(image): return image.score(['grasses with spikelets arranged along one side of the inflorescence'])
iteration: 144 generation: def newfun(image): return image.score([' Agrostis vulgaris var. vulgaris'])
iteration: 145 generation: def newfun(image): return image.score(['spikelets of liliaceous grasses'])
iteration: 146 generation: def newfun(image): return image.score(['grasses with spikelets arranged densely along the inflorescence'])
iteration: 147 generation: def newfun(image): return image.score(['grasses with spikelets arranged in panicles'])
iteration: 148 generation: def newfun(image): return image.score(['grasses with spikelets arranged in Open Panicles'])
iteration: 149 generation: def newfun(image): return image.score(['grasses with densely flowered spikelets'])
iteration: 150 generation: def newfun(image): return image.score(['grasses with spikelets arranged in a raceme or panicle'])
iteration: 151 generation: def newfun(image): return image.score(['grasses with spikelets arranged in a whorl'])
iteration: 152 generation: def newfun(image): return image.score(['grasses with spikelets arranged whorled along the inflorescence'])
iteration: 153 generation: def newfun(image): return image.score(['grasses with irregularly-shaped spikelets'])
iteration: 154 generation: def newfun(image): return image.score(['grasses with purplish spikelets'])
iteration: 155 generation: def newfun(image): return image.score(['grasses with purplish spikelets'])
iteration: 156 generation: def newfun(image): return image.score(['grasses with loose spikelets along the inflorescence'])
iteration: 157 generation: def newfun(image): return image.score(['grasses with spikelets arranged in clusters along the inflorescence'])
iteration: 158 generation: def newfun(image): return image.score([' Agrostis vulgaris'])
iteration: 159 generation: def newfun(image): return image.score(['grasses with spikelets arranged along two or more sides of the inflorescence'])
iteration: 160 generation: def newfun(image): return image.score(['grasses with clusters of small flower spikelets'])
iteration: 161 generation: def newfun(image): return image.score(['inflorescences bearing spikelets'])
iteration: 162 generation: def newfun(image): return image.score(['grasses with dense clusters of spikelets'])
iteration: 163 generation: def newfun(image): return image.score(['grasses with bent or drooping flowers'])
iteration: 164 generation: def newfun(image): return image.score(['spikelets with long awns'])
iteration: 165 generation: def newfun(image): return image.score(['grasses with spikelets arranged along an axis'])
iteration: 166 generation: def newfun(image): return image.score(['grasses with spikelets arranged alternate along the inflorescence'])
iteration: 167 generation: def newfun(image): return image.score(['grasses with spikelets arranged in a raceme inflorescence'])
iteration: 168 generation: def newfun(image): return image.score(['grasses with spikelets arranged whorled along the inflorescence and produced in summer'])
iteration: 169 generation: def newfun(image): return image.score(['grasses with spikelets arranged in a panicle inflorescence'])
iteration: 170 generation: def newfun(image): return image.score(['grasses with spikelets arranged along different parts of the stem'])
iteration: 171 generation: def newfun(image): return image.score(['grasses with spikelets arranged in one-sided clusters along the inflorescence'])
iteration: 172 generation: def newfun(image): return image.score(['grasses with densely flowered spikelets arranged along the stem'])
iteration: 173 generation: def newfun(image): return image.score(['grasses with spikelets arranged in an open panicle'])
iteration: 174 generation: def newfun(image): return image.score(['grasses with spikelets arranged on alternate sides of the inflorescence'])
iteration: 175 generation: def newfun(image): return image.score(['grasses with spikelets arranged  irregularly along the inflorescence'])
iteration: 176 generation: def newfun(image): return image.score(['grasses with spikelets arranged in open domelike clusters'])
iteration: 177 generation: def newfun(image): return image.score(['grasses with spikelets arranged distichously along the inflorescence'])
iteration: 178 generation: def newfun(image): return image.score(['grasses with spikelets arranged in clusters of 2-5'])
iteration: 179 generation: def newfun(image): return image.score(['grasses with spikelets arranged in panicles or racemes'])
iteration: 180 generation: def newfun(image): return image.score(['grasses with spikelets arranged in clusters along the inflorescence'])
iteration: 181 generation: def newfun(image): return image.score(['grasses with spikelets arranged in two-sided clusters along the inflorescence'])
iteration: 182 generation: def newfun(image): return image.score(['grasses with spikelets arranged along three or more sides of the inflorescence'])
iteration: 183 generation: def newfun(image): return image.score(['grasses with spikelets arranged in a raceme inflorescence'])
iteration: 184 generation: def newfun(image): return image.score(['grasses with spikelets arranged in clusters along the stem'])
iteration: 185 generation: def newfun(image): return image.score(['grasses with large showy flowers'])
iteration: 186 generation: def newfun(image): return image.score(['grasses with spikelets arranged alternately along the Inflorescence'])
iteration: 187 generation: def newfun(image): return image.score(['grasses with spikelets arranged in clusters of 1-3'])
iteration: 188 generation: def newfun(image): return image.score(['grasses with spikelets arranged in clusters along the inflorescence'])
iteration: 189 generation: def newfun(image): return image.score(['grasses with spikelets arranged in an open panicle or raceme'])
iteration: 190 generation: def newfun(image): return image.score(['grasses with single flower spikelets'])
iteration: 191 generation: def newfun(image): return image.score(['grasses with spikelets arranged densely along the inflorescence'])
iteration: 192 generation: def newfun(image): return image.score(['grasses with spikelets'])
iteration: 193 generation: def newfun(image): return image.score(['grasses with spikelets arranged in clusters of 4-10'])
iteration: 194 generation: def newfun(image): return image.score(['grasses with spikelets arranged in pairs along the inflorescence and produced in spring'])
iteration: 195 generation: def newfun(image): return image.score(['grasses with spikelets arranged in a raceme inflorescence'])
iteration: 196 generation: def newfun(image): return image.score(['grasses with spikelets arranged in a panicle inflorescence'])
iteration: 197 generation: def newfun(image): return image.score(['grasses with spikelets arranged along one side of the rachis'])
iteration: 198 generation: def newfun(image): return image.score(['grasses with spikelets arranged in open panicles or racemes'])
iteration: 199 generation: def newfun(image): return image.score(['grasses with densely flowered spikelets arranged in clusters along the inflorescence'])
